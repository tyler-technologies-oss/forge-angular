// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input, inject } from '@angular/core';
import { AppBarSearchComponent as AppBarSearchComponentCustomElement, defineAppBarSearchComponent } from '@tylertech/forge';

/**  */
@Component({
    selector: 'forge-app-bar-search',
    changeDetection: ChangeDetectionStrategy.OnPush,
    template: '<ng-content />',
    standalone: false
})
export class AppBarSearchComponent {
	protected elementRef = inject<ElementRef<AppBarSearchComponentCustomElement>>(ElementRef);
	protected zone = inject(NgZone);

	/** The forge-app-bar-search element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The value of the input. */
	@Input()
	public set value(value: AppBarSearchComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): AppBarSearchComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** A boolean property that, if true, indicates that the input should be disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: AppBarSearchComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): AppBarSearchComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** The placeholder text of the input. */
	@Input()
	public set placeholder(value: AppBarSearchComponentCustomElement['placeholder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.placeholder = value;
		});
	}
	public get placeholder(): AppBarSearchComponentCustomElement['placeholder'] {
		return this.nativeElement.placeholder;
	}

	constructor() {
		const changeDetectorRef = inject(ChangeDetectorRef);

		defineAppBarSearchComponent();
		changeDetectorRef.detach();
	}
}
