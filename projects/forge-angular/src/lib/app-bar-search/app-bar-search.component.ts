// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { AppBarSearchComponent as AppBarSearchComponentCustomElement, defineAppBarSearchComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-app-bar-search>` custom element. */
@Component({
  selector: 'forge-app-bar-search',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class AppBarSearchComponent {

	/** The forge-app-bar-search element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Gets/sets the value. */
	@Input()
	public set value(value: AppBarSearchComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): AppBarSearchComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** Gets/sets the disabled state of the search input. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: AppBarSearchComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): AppBarSearchComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** Gets/sets whether this is a combined search box with search options. */
	@Input({ transform: booleanAttribute })
	public set combined(value: AppBarSearchComponentCustomElement['combined']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.combined = value;
		});
	}
	public get combined(): AppBarSearchComponentCustomElement['combined'] {
		return this.nativeElement.combined;
	}

	/** Gets/sets seelcted option for the combined search dropdown. */
	@Input()
	public set combinedOptions(value: AppBarSearchComponentCustomElement['combinedOptions']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.combinedOptions = value;
		});
	}
	public get combinedOptions(): AppBarSearchComponentCustomElement['combinedOptions'] {
		return this.nativeElement.combinedOptions;
	}

	/** Gets/sets selected option for the combined search dropdown. */
	@Input()
	public set selectedCombinedOption(value: AppBarSearchComponentCustomElement['selectedCombinedOption']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.selectedCombinedOption = value;
		});
	}
	public get selectedCombinedOption(): AppBarSearchComponentCustomElement['selectedCombinedOption'] {
		return this.nativeElement.selectedCombinedOption;
	}

	/** Gets/sets whether the global icon is displayed at the end of the input. */
	@Input({ transform: booleanAttribute })
	public set global(value: AppBarSearchComponentCustomElement['global']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.global = value;
		});
	}
	public get global(): AppBarSearchComponentCustomElement['global'] {
		return this.nativeElement.global;
	}

	/** Sets the input placeholder value. */
	@Input()
	public set placeholder(value: AppBarSearchComponentCustomElement['placeholder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.placeholder = value;
		});
	}
	public get placeholder(): AppBarSearchComponentCustomElement['placeholder'] {
		return this.nativeElement.placeholder;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<AppBarSearchComponentCustomElement>,
		protected zone: NgZone
	) {
		defineAppBarSearchComponent();
		changeDetectorRef.detach();
	}
}
