// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { AppBarComponent as AppBarComponentCustomElement, defineAppBarComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-app-bar>` custom element. */
@Component({
  selector: 'forge-app-bar',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class AppBarComponent {

	/** The forge-app-bar element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Gets/sets the title text. */
	@Input()
	public set titleText(value: AppBarComponentCustomElement['titleText']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.titleText = value;
		});
	}
	public get titleText(): AppBarComponentCustomElement['titleText'] {
		return this.nativeElement.titleText;
	}

	/** Gets/sets the fixed variant. */
	@Input({ transform: booleanAttribute })
	public set fixed(value: AppBarComponentCustomElement['fixed']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.fixed = value;
		});
	}
	public get fixed(): AppBarComponentCustomElement['fixed'] {
		return this.nativeElement.fixed;
	}

	/** Gets/sets the raised state. */
	@Input({ transform: booleanAttribute })
	public set raised(value: AppBarComponentCustomElement['raised']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.raised = value;
		});
	}
	public get raised(): AppBarComponentCustomElement['raised'] {
		return this.nativeElement.raised;
	}

	/** Convenience property to allow for easily getting/setting the theme color from JavaScript. */
	@Input()
	public set theme(value: AppBarComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): AppBarComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}


	public initializedCallback(...args: Parameters<AppBarComponentCustomElement['initializedCallback']>): ReturnType<AppBarComponentCustomElement['initializedCallback']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.initializedCallback(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<AppBarComponentCustomElement>,
		protected zone: NgZone
	) {
		defineAppBarComponent();
		changeDetectorRef.detach();
	}
}
