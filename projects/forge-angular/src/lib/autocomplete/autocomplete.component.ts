// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { AutocompleteComponent as AutocompleteComponentCustomElement, defineAutocompleteComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-autocomplete',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class AutocompleteComponent {

	/** The forge-autocomplete element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Gets/sets the interaction mode. */
	@Input()
	public set mode(value: AutocompleteComponentCustomElement['mode']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.mode = value;
		});
	}
	public get mode(): AutocompleteComponentCustomElement['mode'] {
		return this.nativeElement.mode;
	}

	/** Gets/sets the multi-select state. */
	@Input({ transform: booleanAttribute })
	public set multiple(value: AutocompleteComponentCustomElement['multiple']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.multiple = value;
		});
	}
	public get multiple(): AutocompleteComponentCustomElement['multiple'] {
		return this.nativeElement.multiple;
	}

	/** Gets/sets the value. */
	@Input()
	public set value(value: AutocompleteComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): AutocompleteComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** Gets/sets the debounce delay (milliseconds) for keyboard events. */
	@Input({ transform: numberAttribute })
	public set debounce(value: AutocompleteComponentCustomElement['debounce']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.debounce = value;
		});
	}
	public get debounce(): AutocompleteComponentCustomElement['debounce'] {
		return this.nativeElement.debounce;
	}

	/** Gets/sets filter on focus settings which controls whether the dropdown displays automatically when focused. */
	@Input({ transform: booleanAttribute })
	public set filterOnFocus(value: AutocompleteComponentCustomElement['filterOnFocus']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.filterOnFocus = value;
		});
	}
	public get filterOnFocus(): AutocompleteComponentCustomElement['filterOnFocus'] {
		return this.nativeElement.filterOnFocus;
	}

	/** Gets/sets whether the first option in the dropdown will be focused automatically when opened or not. */
	@Input({ transform: booleanAttribute })
	public set filterFocusFirst(value: AutocompleteComponentCustomElement['filterFocusFirst']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.filterFocusFirst = value;
		});
	}
	public get filterFocusFirst(): AutocompleteComponentCustomElement['filterFocusFirst'] {
		return this.nativeElement.filterFocusFirst;
	}

	/** Controls whether unmatched text entered by the user will stay visible an option in the dropdown is not found. */
	@Input({ transform: booleanAttribute })
	public set allowUnmatched(value: AutocompleteComponentCustomElement['allowUnmatched']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.allowUnmatched = value;
		});
	}
	public get allowUnmatched(): AutocompleteComponentCustomElement['allowUnmatched'] {
		return this.nativeElement.allowUnmatched;
	}

	/** Gets/sets the selector that will be used to find an element to attach the popup to. Defaults to the input element. */
	@Input()
	public set popupTarget(value: AutocompleteComponentCustomElement['popupTarget']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupTarget = value;
		});
	}
	public get popupTarget(): AutocompleteComponentCustomElement['popupTarget'] {
		return this.nativeElement.popupTarget;
	}

	/**
	 * Gets/sets the filter text.
	 * 
	 * Setting the filter text only applies when allowUnmatched is enabled.
	 */
	@Input()
	public set filterText(value: AutocompleteComponentCustomElement['filterText']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.filterText = value;
		});
	}
	public get filterText(): AutocompleteComponentCustomElement['filterText'] {
		return this.nativeElement.filterText;
	}

	/** Sets the option builder callback that will be executed when building the option list in the dropdown. */
	@Input()
	public set optionBuilder(value: AutocompleteComponentCustomElement['optionBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.optionBuilder = value;
		});
	}
	public get optionBuilder(): AutocompleteComponentCustomElement['optionBuilder'] {
		return this.nativeElement.optionBuilder;
	}

	/** Sets the filter callback that will be executed when fetching options for the autocomplete dropdown. */
	@Input()
	public set filter(value: AutocompleteComponentCustomElement['filter']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.filter = value;
		});
	}
	public get filter(): AutocompleteComponentCustomElement['filter'] {
		return this.nativeElement.filter;
	}

	/** Sets the selected text builder callback that will be executed when getting the selected text. */
	@Input()
	public set selectedTextBuilder(value: AutocompleteComponentCustomElement['selectedTextBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.selectedTextBuilder = value;
		});
	}
	public get selectedTextBuilder(): AutocompleteComponentCustomElement['selectedTextBuilder'] {
		return this.nativeElement.selectedTextBuilder;
	}

	/** Controls the open state of the dropdown. */
	@Input({ transform: booleanAttribute })
	public set open(value: AutocompleteComponentCustomElement['open']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.open = value;
		});
	}
	public get open(): AutocompleteComponentCustomElement['open'] {
		return this.nativeElement.open;
	}

	/** Gets/sets the property key to match the value to an option. */
	@Input()
	public set matchKey(value: AutocompleteComponentCustomElement['matchKey']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.matchKey = value;
		});
	}
	public get matchKey(): AutocompleteComponentCustomElement['matchKey'] {
		return this.nativeElement.matchKey;
	}

	/** Returns whether the component has been initialized or not yet. */
	public get isInitialized(): AutocompleteComponentCustomElement['isInitialized'] {
		return this.nativeElement.isInitialized;
	}

	/** Gets the currently active popup element when the dropdown is open. */
	public get popupElement(): AutocompleteComponentCustomElement['popupElement'] {
		return this.nativeElement.popupElement;
	}

	/** Sets the callback to be executed when the user selects an option, before the UI is updated to allow for validation. */
	@Input()
	public set beforeValueChange(value: AutocompleteComponentCustomElement['beforeValueChange']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.beforeValueChange = value;
		});
	}
	public get beforeValueChange(): AutocompleteComponentCustomElement['beforeValueChange'] {
		return this.nativeElement.beforeValueChange;
	}

	/** Gets/sets the list of classes to apply to the popup element. */
	@Input()
	public set popupClasses(value: AutocompleteComponentCustomElement['popupClasses']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupClasses = value;
		});
	}
	public get popupClasses(): AutocompleteComponentCustomElement['popupClasses'] {
		return this.nativeElement.popupClasses;
	}

	/** Gets/sets the callback function for generating header content within the popup. */
	@Input()
	public set popupHeaderBuilder(value: AutocompleteComponentCustomElement['popupHeaderBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupHeaderBuilder = value;
		});
	}
	public get popupHeaderBuilder(): AutocompleteComponentCustomElement['popupHeaderBuilder'] {
		return this.nativeElement.popupHeaderBuilder;
	}

	/** Gets/sets the callback function for generating header content within the popup. */
	@Input()
	public set popupFooterBuilder(value: AutocompleteComponentCustomElement['popupFooterBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupFooterBuilder = value;
		});
	}
	public get popupFooterBuilder(): AutocompleteComponentCustomElement['popupFooterBuilder'] {
		return this.nativeElement.popupFooterBuilder;
	}

	/** Gets/sets whether the popup width is synchronized with the popup target width. */
	@Input({ transform: booleanAttribute })
	public set syncPopupWidth(value: AutocompleteComponentCustomElement['syncPopupWidth']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.syncPopupWidth = value;
		});
	}
	public get syncPopupWidth(): AutocompleteComponentCustomElement['syncPopupWidth'] {
		return this.nativeElement.syncPopupWidth;
	}

	/** Gets/sets the maximum number of options to display in the dropdown. */
	@Input({ transform: numberAttribute })
	public set optionLimit(value: AutocompleteComponentCustomElement['optionLimit']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.optionLimit = value;
		});
	}
	public get optionLimit(): AutocompleteComponentCustomElement['optionLimit'] {
		return this.nativeElement.optionLimit;
	}

	/** Controls the observation of scroll events on the dropdown. */
	@Input({ transform: booleanAttribute })
	public set observeScroll(value: AutocompleteComponentCustomElement['observeScroll']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.observeScroll = value;
		});
	}
	public get observeScroll(): AutocompleteComponentCustomElement['observeScroll'] {
		return this.nativeElement.observeScroll;
	}

	/** The number of pixels from the bottom to trigger the scroll bottom event. Only applicable if `observeScroll` is true. */
	@Input({ transform: numberAttribute })
	public set observeScrollThreshold(value: AutocompleteComponentCustomElement['observeScrollThreshold']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.observeScrollThreshold = value;
		});
	}
	public get observeScrollThreshold(): AutocompleteComponentCustomElement['observeScrollThreshold'] {
		return this.nativeElement.observeScrollThreshold;
	}

	/** Gets/sets whether the popup width will be constrained to a max width of the viewport width (default: `100vw`). */
	@Input({ transform: booleanAttribute })
	public set constrainPopupWidth(value: AutocompleteComponentCustomElement['constrainPopupWidth']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.constrainPopupWidth = value;
		});
	}
	public get constrainPopupWidth(): AutocompleteComponentCustomElement['constrainPopupWidth'] {
		return this.nativeElement.constrainPopupWidth;
	}

	/**
	 * Gets/sets whether the options will wrap their text or not.
	 * This only applies if `constrainPopupWidth` is `true`, if there is an explicit width set via CSS.
	 */
	@Input({ transform: booleanAttribute })
	public set wrapOptionText(value: AutocompleteComponentCustomElement['wrapOptionText']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.wrapOptionText = value;
		});
	}
	public get wrapOptionText(): AutocompleteComponentCustomElement['wrapOptionText'] {
		return this.nativeElement.wrapOptionText;
	}

	/** Adds options to the dropdown while it is open. Has no effect if the dropdown is closed. */
	public appendOptions(...args: Parameters<AutocompleteComponentCustomElement['appendOptions']>): ReturnType<AutocompleteComponentCustomElement['appendOptions']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.appendOptions(...args));
	}

	/** Opens the dropdown. */
	public openDropdown(...args: Parameters<AutocompleteComponentCustomElement['openDropdown']>): ReturnType<AutocompleteComponentCustomElement['openDropdown']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.openDropdown(...args));
	}

	/** Closes the dropdown. */
	public closeDropdown(...args: Parameters<AutocompleteComponentCustomElement['closeDropdown']>): ReturnType<AutocompleteComponentCustomElement['closeDropdown']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.closeDropdown(...args));
	}

	/** Forces the filter callback to be executed to update the current selection state with new options. */
	public forceFilter(...args: Parameters<AutocompleteComponentCustomElement['forceFilter']>): ReturnType<AutocompleteComponentCustomElement['forceFilter']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.forceFilter(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<AutocompleteComponentCustomElement>,
		protected zone: NgZone
	) {
		defineAutocompleteComponent();
		changeDetectorRef.detach();
	}
}
