// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { AvatarComponent as AvatarComponentCustomElement, defineAvatarComponent } from '@tylertech/forge';

/** The custom element class behind the `<forge-avatar>` element. */
@Component({
  selector: 'forge-avatar',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class AvatarComponent {

	/** Gets/sets the text to display. */
	@Input()
	public set text(value: AvatarComponentCustomElement['text']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.text = value;
		});
	}

	public get text(): AvatarComponentCustomElement['text'] {
		return this.elementRef.nativeElement.text;
	}

	/** Controls the number of letters to display from the text. By default the text is split on spaces and the first character of each word is used. */
	@Input()
	public set letterCount(value: AvatarComponentCustomElement['letterCount'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.letterCount = +value;
		});
	}

	public get letterCount(): AvatarComponentCustomElement['letterCount'] {
		return this.elementRef.nativeElement.letterCount;
	}

	/** Sets the background image URL to use. */
	@Input()
	public set imageUrl(value: AvatarComponentCustomElement['imageUrl']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.imageUrl = value;
		});
	}

	public get imageUrl(): AvatarComponentCustomElement['imageUrl'] {
		return this.elementRef.nativeElement.imageUrl;
	}

	/** Controls whether the background color is set automatically based on the text value. Does not have any effect when an image URL is specified. */
	@Input()
	public set autoColor(value: AvatarComponentCustomElement['autoColor'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.autoColor = value != null && `${value}` !== 'false';
		});
	}

	public get autoColor(): AvatarComponentCustomElement['autoColor'] {
		return this.elementRef.nativeElement.autoColor;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<AvatarComponentCustomElement>,
		protected zone: NgZone
	) {
		defineAvatarComponent();
		changeDetectorRef.detach();
	}
}
