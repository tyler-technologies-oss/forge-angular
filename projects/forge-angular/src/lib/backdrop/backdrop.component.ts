// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { BackdropComponent as BackdropComponentCustomElement, defineBackdropComponent } from '@tylertech/forge';

/** A web component that renders a backdrop covering its parent container with a semi-opaque element. */
@Component({
  selector: 'forge-backdrop',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class BackdropComponent {

	/** The forge-backdrop element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/**
	 * The time in milliseconds to delay the fade in animation of the opacity.
	 * Note: The element will start with 0% opacity when the component is rendered.
	 */
	@Input({ transform: numberAttribute })
	public set delay(value: BackdropComponentCustomElement['delay']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.delay = value;
		});
	}
	public get delay(): BackdropComponentCustomElement['delay'] {
		return this.nativeElement.delay;
	}

	/** Controls whether the theme defaults to light vs dark compatibility. */
	@Input()
	public set appearance(value: BackdropComponentCustomElement['appearance']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.appearance = value;
		});
	}
	public get appearance(): BackdropComponentCustomElement['appearance'] {
		return this.nativeElement.appearance;
	}

	/** The max opacity to fade the element to. This defines how opaque the backdrop is when visible. */
	@Input({ transform: numberAttribute })
	public set maxOpacity(value: BackdropComponentCustomElement['maxOpacity']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.maxOpacity = value;
		});
	}
	public get maxOpacity(): BackdropComponentCustomElement['maxOpacity'] {
		return this.nativeElement.maxOpacity;
	}

	/** Starts the fade-out animation to animate the backdrop to 0% opacity. */
	public fadeOut(...args: Parameters<BackdropComponentCustomElement['fadeOut']>): ReturnType<BackdropComponentCustomElement['fadeOut']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.fadeOut(...args));
	}

	/** Starts the fade-in animation to animate the backdrop to max opacity. */
	public fadeIn(...args: Parameters<BackdropComponentCustomElement['fadeIn']>): ReturnType<BackdropComponentCustomElement['fadeIn']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.fadeIn(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<BackdropComponentCustomElement>,
		protected zone: NgZone
	) {
		defineBackdropComponent();
		changeDetectorRef.detach();
	}
}
