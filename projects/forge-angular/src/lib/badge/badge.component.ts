// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { BadgeComponent as BadgeComponentCustomElement, defineBadgeComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-badge',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class BadgeComponent {

	/** The forge-badge element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Controls whether the badge will be a small dot without any content visible. */
	@Input({ transform: booleanAttribute })
	public set dot(value: BadgeComponentCustomElement['dot']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dot = value;
		});
	}
	public get dot(): BadgeComponentCustomElement['dot'] {
		return this.nativeElement.dot;
	}

	/** The theme of the badge. */
	@Input()
	public set theme(value: BadgeComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): BadgeComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}

	/** Controls whether the badge will have a stronger visual appearance. */
	@Input({ transform: booleanAttribute })
	public set strong(value: BadgeComponentCustomElement['strong']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.strong = value;
		});
	}
	public get strong(): BadgeComponentCustomElement['strong'] {
		return this.nativeElement.strong;
	}

	/** Controls whether the badge is visible. */
	@Input({ transform: booleanAttribute })
	public set hide(value: BadgeComponentCustomElement['hide']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.hide = value;
		});
	}
	public get hide(): BadgeComponentCustomElement['hide'] {
		return this.nativeElement.hide;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<BadgeComponentCustomElement>,
		protected zone: NgZone
	) {
		defineBadgeComponent();
		changeDetectorRef.detach();
	}
}
