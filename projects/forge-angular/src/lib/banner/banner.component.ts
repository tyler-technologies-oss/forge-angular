// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { BannerComponent as BannerComponentCustomElement, defineBannerComponent } from '@tylertech/forge';

/** The custom element class behind the `<forge-banner>` element. */
@Component({
  selector: 'forge-banner',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class BannerComponent {

	/** The forge-banner element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Controls whether the component is dismissed (hidden) or not. */
	@Input({ transform: booleanAttribute })
	public set dismissed(value: BannerComponentCustomElement['dismissed']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dismissed = value;
		});
	}
	public get dismissed(): BannerComponentCustomElement['dismissed'] {
		return this.nativeElement.dismissed;
	}

	/** Controls the visibility of the dismiss button. */
	@Input({ transform: booleanAttribute })
	public set canDismiss(value: BannerComponentCustomElement['canDismiss']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.canDismiss = value;
		});
	}
	public get canDismiss(): BannerComponentCustomElement['canDismiss'] {
		return this.nativeElement.canDismiss;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<BannerComponentCustomElement>,
		protected zone: NgZone
	) {
		defineBannerComponent();
		changeDetectorRef.detach();
	}
}
