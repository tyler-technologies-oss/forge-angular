// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { BusyIndicatorComponent as BusyIndicatorComponentCustomElement, defineBusyIndicatorComponent } from '@tylertech/forge';

/** A web component that renders a busy indicator covering its parent container. */
@Component({
  selector: 'forge-busy-indicator',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class BusyIndicatorComponent {

	/** The forge-busy-indicator element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The title to be displayed. */
	@Input()
	public set titleText(value: BusyIndicatorComponentCustomElement['titleText']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.titleText = value;
		});
	}
	public get titleText(): BusyIndicatorComponentCustomElement['titleText'] {
		return this.nativeElement.titleText;
	}

	/** The message to be displayed. */
	@Input()
	public set message(value: BusyIndicatorComponentCustomElement['message']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.message = value;
		});
	}
	public get message(): BusyIndicatorComponentCustomElement['message'] {
		return this.nativeElement.message;
	}

	/** Controls whether the cancel button is visible or not. */
	@Input({ transform: booleanAttribute })
	public set cancel(value: BusyIndicatorComponentCustomElement['cancel']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.cancel = value;
		});
	}
	public get cancel(): BusyIndicatorComponentCustomElement['cancel'] {
		return this.nativeElement.cancel;
	}

	/** Controls whether the progress spinner is visible or not. */
	@Input({ transform: booleanAttribute })
	public set spinner(value: BusyIndicatorComponentCustomElement['spinner']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.spinner = value;
		});
	}
	public get spinner(): BusyIndicatorComponentCustomElement['spinner'] {
		return this.nativeElement.spinner;
	}

	/** Controls whether the progres bar is visible or not. */
	@Input({ transform: booleanAttribute })
	public set progressBar(value: BusyIndicatorComponentCustomElement['progressBar']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.progressBar = value;
		});
	}
	public get progressBar(): BusyIndicatorComponentCustomElement['progressBar'] {
		return this.nativeElement.progressBar;
	}

	/** Sets the progress bar determinate state. */
	@Input({ transform: booleanAttribute })
	public set progressBarDeterminate(value: BusyIndicatorComponentCustomElement['progressBarDeterminate']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.progressBarDeterminate = value;
		});
	}
	public get progressBarDeterminate(): BusyIndicatorComponentCustomElement['progressBarDeterminate'] {
		return this.nativeElement.progressBarDeterminate;
	}

	/** The progress amount of the progress bar. */
	@Input({ transform: numberAttribute })
	public set progress(value: BusyIndicatorComponentCustomElement['progress']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.progress = value;
		});
	}
	public get progress(): BusyIndicatorComponentCustomElement['progress'] {
		return this.nativeElement.progress;
	}

	/** The buffer amount of the progress bar. */
	@Input({ transform: numberAttribute })
	public set buffer(value: BusyIndicatorComponentCustomElement['buffer']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.buffer = value;
		});
	}
	public get buffer(): BusyIndicatorComponentCustomElement['buffer'] {
		return this.nativeElement.buffer;
	}

	/** Sets the width of the busy indicator element. */
	@Input()
	public set width(value: BusyIndicatorComponentCustomElement['width']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.width = value;
		});
	}
	public get width(): BusyIndicatorComponentCustomElement['width'] {
		return this.nativeElement.width;
	}

	/** The layout direction for alternative designs. */
	@Input()
	public set direction(value: BusyIndicatorComponentCustomElement['direction']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.direction = value;
		});
	}
	public get direction(): BusyIndicatorComponentCustomElement['direction'] {
		return this.nativeElement.direction;
	}

	/** Controls whether the component will manage capturing and relasing focus when opened/closed. */
	@Input({ transform: booleanAttribute })
	public set manageFocus(value: BusyIndicatorComponentCustomElement['manageFocus']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.manageFocus = value;
		});
	}
	public get manageFocus(): BusyIndicatorComponentCustomElement['manageFocus'] {
		return this.nativeElement.manageFocus;
	}

	/**
	 * Controls the `position` of the backdrop and surface element between `fixed` and `absolute` positioning. Default is `true`.
	 * 
	 * Note: use this property when you want to render the busy indicator within a specific element where it doesn't fill the
	 *       full viewport heigth/width to only cover the parent element bounds.
	 */
	@Input({ transform: booleanAttribute })
	public set fixed(value: BusyIndicatorComponentCustomElement['fixed']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.fixed = value;
		});
	}
	public get fixed(): BusyIndicatorComponentCustomElement['fixed'] {
		return this.nativeElement.fixed;
	}


	public initializedCallback(...args: Parameters<BusyIndicatorComponentCustomElement['initializedCallback']>): ReturnType<BusyIndicatorComponentCustomElement['initializedCallback']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.initializedCallback(...args));
	}

	/** Removes the element from the DOM. */
	public hide(...args: Parameters<BusyIndicatorComponentCustomElement['hide']>): ReturnType<BusyIndicatorComponentCustomElement['hide']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.hide(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<BusyIndicatorComponentCustomElement>,
		protected zone: NgZone
	) {
		defineBusyIndicatorComponent();
		changeDetectorRef.detach();
	}
}
