// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { ButtonToggleGroupComponent as ButtonToggleGroupComponentCustomElement, defineButtonToggleGroupComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-button-toggle-group>` custom element. */
@Component({
  selector: 'forge-button-toggle-group',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ButtonToggleGroupComponent {

	/** The forge-button-toggle-group element. */
	public readonly nativeElement = this.elementRef.nativeElement;


	@Input()
	public set value(value: ButtonToggleGroupComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): ButtonToggleGroupComponentCustomElement['value'] {
		return this.nativeElement.value;
	}


	@Input({ transform: booleanAttribute })
	public set multiple(value: ButtonToggleGroupComponentCustomElement['multiple']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.multiple = value;
		});
	}
	public get multiple(): ButtonToggleGroupComponentCustomElement['multiple'] {
		return this.nativeElement.multiple;
	}


	@Input({ transform: booleanAttribute })
	public set mandatory(value: ButtonToggleGroupComponentCustomElement['mandatory']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.mandatory = value;
		});
	}
	public get mandatory(): ButtonToggleGroupComponentCustomElement['mandatory'] {
		return this.nativeElement.mandatory;
	}


	@Input({ transform: booleanAttribute })
	public set vertical(value: ButtonToggleGroupComponentCustomElement['vertical']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.vertical = value;
		});
	}
	public get vertical(): ButtonToggleGroupComponentCustomElement['vertical'] {
		return this.nativeElement.vertical;
	}


	@Input({ transform: booleanAttribute })
	public set stretch(value: ButtonToggleGroupComponentCustomElement['stretch']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.stretch = value;
		});
	}
	public get stretch(): ButtonToggleGroupComponentCustomElement['stretch'] {
		return this.nativeElement.stretch;
	}


	@Input({ transform: booleanAttribute })
	public set dense(value: ButtonToggleGroupComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): ButtonToggleGroupComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}


	@Input({ transform: booleanAttribute })
	public set disabled(value: ButtonToggleGroupComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): ButtonToggleGroupComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}


	@Input()
	public set options(value: ButtonToggleGroupComponentCustomElement['options']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.options = value;
		});
	}
	public get options(): ButtonToggleGroupComponentCustomElement['options'] {
		return this.nativeElement.options;
	}


	public initializedCallback(...args: Parameters<ButtonToggleGroupComponentCustomElement['initializedCallback']>): ReturnType<ButtonToggleGroupComponentCustomElement['initializedCallback']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.initializedCallback(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ButtonToggleGroupComponentCustomElement>,
		protected zone: NgZone
	) {
		defineButtonToggleGroupComponent();
		changeDetectorRef.detach();
	}
}
