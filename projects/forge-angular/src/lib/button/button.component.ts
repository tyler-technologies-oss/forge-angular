// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { ButtonComponent as ButtonComponentCustomElement, defineButtonComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-button',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ButtonComponent {

	/** The forge-button element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The variant of the button. Defaults to `text`. */
	@Input()
	public set variant(value: ButtonComponentCustomElement['variant']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.variant = value;
		});
	}
	public get variant(): ButtonComponentCustomElement['variant'] {
		return this.nativeElement.variant;
	}

	/** Whether or not the button is pill-shaped. */
	@Input({ transform: booleanAttribute })
	public set pill(value: ButtonComponentCustomElement['pill']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.pill = value;
		});
	}
	public get pill(): ButtonComponentCustomElement['pill'] {
		return this.nativeElement.pill;
	}

	/** The theme of the button. Defaults to `primary`. */
	@Input()
	public set theme(value: ButtonComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): ButtonComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}

	/** Whether or not the button is full-width. */
	@Input({ transform: booleanAttribute })
	public set fullWidth(value: ButtonComponentCustomElement['fullWidth']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.fullWidth = value;
		});
	}
	public get fullWidth(): ButtonComponentCustomElement['fullWidth'] {
		return this.nativeElement.fullWidth;
	}

	/** The type of button. Defaults to `button`. Valid values are `button`, `submit`, and `reset`. */
	@Input()
	public set type(value: ButtonComponentCustomElement['type']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.type = value;
		});
	}
	public get type(): ButtonComponentCustomElement['type'] {
		return this.nativeElement.type;
	}

	/** Whether or not the button is disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: ButtonComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): ButtonComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** Whether or not the button shows a built-in popover icon. */
	@Input({ transform: booleanAttribute })
	public set popoverIcon(value: ButtonComponentCustomElement['popoverIcon']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverIcon = value;
		});
	}
	public get popoverIcon(): ButtonComponentCustomElement['popoverIcon'] {
		return this.nativeElement.popoverIcon;
	}

	/** The name of the button. */
	@Input()
	public set name(value: ButtonComponentCustomElement['name']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.name = value;
		});
	}
	public get name(): ButtonComponentCustomElement['name'] {
		return this.nativeElement.name;
	}

	/** The form value of the button. */
	@Input()
	public set value(value: ButtonComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): ButtonComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** Whether or not the button is dense. */
	@Input({ transform: booleanAttribute })
	public set dense(value: ButtonComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): ButtonComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** The form reference of the button if within a `<form>` element. */
	public get form(): ButtonComponentCustomElement['form'] {
		return this.nativeElement.form;
	}


	public click(...args: Parameters<ButtonComponentCustomElement['click']>): ReturnType<ButtonComponentCustomElement['click']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.click(...args));
	}


	public focus(...args: Parameters<ButtonComponentCustomElement['focus']>): ReturnType<ButtonComponentCustomElement['focus']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ButtonComponentCustomElement>,
		protected zone: NgZone
	) {
		defineButtonComponent();
		changeDetectorRef.detach();
	}
}
