// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { CalendarComponent as CalendarComponentCustomElement, defineCalendarComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-calendar>` custom element. */
@Component({
  selector: 'forge-calendar',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class CalendarComponent {

	/** The forge-calendar element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** readonly */
	@Input()
	public set activeDate(value: CalendarComponentCustomElement['activeDate']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.activeDate = value;
		});
	}
	public get activeDate(): CalendarComponentCustomElement['activeDate'] {
		return this.nativeElement.activeDate;
	}


	@Input({ transform: booleanAttribute })
	public set allowSingleDateRange(value: CalendarComponentCustomElement['allowSingleDateRange']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.allowSingleDateRange = value;
		});
	}
	public get allowSingleDateRange(): CalendarComponentCustomElement['allowSingleDateRange'] {
		return this.nativeElement.allowSingleDateRange;
	}


	@Input({ transform: booleanAttribute })
	public set clearButton(value: CalendarComponentCustomElement['clearButton']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.clearButton = value;
		});
	}
	public get clearButton(): CalendarComponentCustomElement['clearButton'] {
		return this.nativeElement.clearButton;
	}


	@Input()
	public set clearCallback(value: CalendarComponentCustomElement['clearCallback']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.clearCallback = value;
		});
	}
	public get clearCallback(): CalendarComponentCustomElement['clearCallback'] {
		return this.nativeElement.clearCallback;
	}


	@Input({ transform: booleanAttribute })
	public set constrainToEnabled(value: CalendarComponentCustomElement['constrainToEnabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.constrainToEnabled = value;
		});
	}
	public get constrainToEnabled(): CalendarComponentCustomElement['constrainToEnabled'] {
		return this.nativeElement.constrainToEnabled;
	}


	@Input()
	public set dateBuilder(value: CalendarComponentCustomElement['dateBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dateBuilder = value;
		});
	}
	public get dateBuilder(): CalendarComponentCustomElement['dateBuilder'] {
		return this.nativeElement.dateBuilder;
	}


	@Input()
	public set dateSelectCallback(value: CalendarComponentCustomElement['dateSelectCallback']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dateSelectCallback = value;
		});
	}
	public get dateSelectCallback(): CalendarComponentCustomElement['dateSelectCallback'] {
		return this.nativeElement.dateSelectCallback;
	}


	@Input()
	public set dayBuilder(value: CalendarComponentCustomElement['dayBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dayBuilder = value;
		});
	}
	public get dayBuilder(): CalendarComponentCustomElement['dayBuilder'] {
		return this.nativeElement.dayBuilder;
	}


	@Input()
	public set disabledDateBuilder(value: CalendarComponentCustomElement['disabledDateBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabledDateBuilder = value;
		});
	}
	public get disabledDateBuilder(): CalendarComponentCustomElement['disabledDateBuilder'] {
		return this.nativeElement.disabledDateBuilder;
	}


	@Input()
	public set disabledDates(value: CalendarComponentCustomElement['disabledDates']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabledDates = value;
		});
	}
	public get disabledDates(): CalendarComponentCustomElement['disabledDates'] {
		return this.nativeElement.disabledDates;
	}


	@Input()
	public set disabledDaysOfWeek(value: CalendarComponentCustomElement['disabledDaysOfWeek']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabledDaysOfWeek = value;
		});
	}
	public get disabledDaysOfWeek(): CalendarComponentCustomElement['disabledDaysOfWeek'] {
		return this.nativeElement.disabledDaysOfWeek;
	}


	@Input()
	public set eventBuilder(value: CalendarComponentCustomElement['eventBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.eventBuilder = value;
		});
	}
	public get eventBuilder(): CalendarComponentCustomElement['eventBuilder'] {
		return this.nativeElement.eventBuilder;
	}


	@Input()
	public set events(value: CalendarComponentCustomElement['events']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.events = value;
		});
	}
	public get events(): CalendarComponentCustomElement['events'] {
		return this.nativeElement.events;
	}


	@Input()
	public set firstDayOfWeek(value: CalendarComponentCustomElement['firstDayOfWeek']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.firstDayOfWeek = value;
		});
	}
	public get firstDayOfWeek(): CalendarComponentCustomElement['firstDayOfWeek'] {
		return this.nativeElement.firstDayOfWeek;
	}


	@Input({ transform: booleanAttribute })
	public set fixedHeight(value: CalendarComponentCustomElement['fixedHeight']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.fixedHeight = value;
		});
	}
	public get fixedHeight(): CalendarComponentCustomElement['fixedHeight'] {
		return this.nativeElement.fixedHeight;
	}


	@Input({ transform: booleanAttribute })
	public set listYears(value: CalendarComponentCustomElement['listYears']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.listYears = value;
		});
	}
	public get listYears(): CalendarComponentCustomElement['listYears'] {
		return this.nativeElement.listYears;
	}


	@Input()
	public set locale(value: CalendarComponentCustomElement['locale']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.locale = value;
		});
	}
	public get locale(): CalendarComponentCustomElement['locale'] {
		return this.nativeElement.locale;
	}


	@Input()
	public set max(value: CalendarComponentCustomElement['max']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.max = value;
		});
	}
	public get max(): CalendarComponentCustomElement['max'] {
		return this.nativeElement.max;
	}


	@Input()
	public set menuAnimation(value: CalendarComponentCustomElement['menuAnimation']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.menuAnimation = value;
		});
	}
	public get menuAnimation(): CalendarComponentCustomElement['menuAnimation'] {
		return this.nativeElement.menuAnimation;
	}


	@Input()
	public set min(value: CalendarComponentCustomElement['min']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.min = value;
		});
	}
	public get min(): CalendarComponentCustomElement['min'] {
		return this.nativeElement.min;
	}


	@Input()
	public set mode(value: CalendarComponentCustomElement['mode']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.mode = value;
		});
	}
	public get mode(): CalendarComponentCustomElement['mode'] {
		return this.nativeElement.mode;
	}


	@Input({ transform: numberAttribute })
	public set month(value: CalendarComponentCustomElement['month']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.month = value;
		});
	}
	public get month(): CalendarComponentCustomElement['month'] {
		return this.nativeElement.month;
	}


	@Input({ transform: booleanAttribute })
	public set preventFocus(value: CalendarComponentCustomElement['preventFocus']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.preventFocus = value;
		});
	}
	public get preventFocus(): CalendarComponentCustomElement['preventFocus'] {
		return this.nativeElement.preventFocus;
	}


	@Input({ transform: booleanAttribute })
	public set readonly(value: CalendarComponentCustomElement['readonly']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.readonly = value;
		});
	}
	public get readonly(): CalendarComponentCustomElement['readonly'] {
		return this.nativeElement.readonly;
	}


	@Input({ transform: booleanAttribute })
	public set selectionFollowsMonth(value: CalendarComponentCustomElement['selectionFollowsMonth']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.selectionFollowsMonth = value;
		});
	}
	public get selectionFollowsMonth(): CalendarComponentCustomElement['selectionFollowsMonth'] {
		return this.nativeElement.selectionFollowsMonth;
	}


	@Input({ transform: booleanAttribute })
	public set showHeader(value: CalendarComponentCustomElement['showHeader']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.showHeader = value;
		});
	}
	public get showHeader(): CalendarComponentCustomElement['showHeader'] {
		return this.nativeElement.showHeader;
	}


	@Input({ transform: booleanAttribute })
	public set showOtherMonths(value: CalendarComponentCustomElement['showOtherMonths']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.showOtherMonths = value;
		});
	}
	public get showOtherMonths(): CalendarComponentCustomElement['showOtherMonths'] {
		return this.nativeElement.showOtherMonths;
	}


	@Input({ transform: booleanAttribute })
	public set showToday(value: CalendarComponentCustomElement['showToday']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.showToday = value;
		});
	}
	public get showToday(): CalendarComponentCustomElement['showToday'] {
		return this.nativeElement.showToday;
	}


	@Input({ transform: booleanAttribute })
	public set todayButton(value: CalendarComponentCustomElement['todayButton']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.todayButton = value;
		});
	}
	public get todayButton(): CalendarComponentCustomElement['todayButton'] {
		return this.nativeElement.todayButton;
	}


	@Input()
	public set todayCallback(value: CalendarComponentCustomElement['todayCallback']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.todayCallback = value;
		});
	}
	public get todayCallback(): CalendarComponentCustomElement['todayCallback'] {
		return this.nativeElement.todayCallback;
	}


	@Input()
	public set tooltipBuilder(value: CalendarComponentCustomElement['tooltipBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.tooltipBuilder = value;
		});
	}
	public get tooltipBuilder(): CalendarComponentCustomElement['tooltipBuilder'] {
		return this.nativeElement.tooltipBuilder;
	}


	@Input()
	public set value(value: CalendarComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): CalendarComponentCustomElement['value'] {
		return this.nativeElement.value;
	}


	@Input()
	public set view(value: CalendarComponentCustomElement['view']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.view = value;
		});
	}
	public get view(): CalendarComponentCustomElement['view'] {
		return this.nativeElement.view;
	}


	@Input()
	public set weekendDays(value: CalendarComponentCustomElement['weekendDays']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.weekendDays = value;
		});
	}
	public get weekendDays(): CalendarComponentCustomElement['weekendDays'] {
		return this.nativeElement.weekendDays;
	}


	@Input({ transform: numberAttribute })
	public set year(value: CalendarComponentCustomElement['year']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.year = value;
		});
	}
	public get year(): CalendarComponentCustomElement['year'] {
		return this.nativeElement.year;
	}


	@Input()
	public set yearRange(value: CalendarComponentCustomElement['yearRange']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.yearRange = value;
		});
	}
	public get yearRange(): CalendarComponentCustomElement['yearRange'] {
		return this.nativeElement.yearRange;
	}


	public clear(...args: Parameters<CalendarComponentCustomElement['clear']>): ReturnType<CalendarComponentCustomElement['clear']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.clear(...args));
	}


	public deselectDate(...args: Parameters<CalendarComponentCustomElement['deselectDate']>): ReturnType<CalendarComponentCustomElement['deselectDate']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.deselectDate(...args));
	}


	public goToDate(...args: Parameters<CalendarComponentCustomElement['goToDate']>): ReturnType<CalendarComponentCustomElement['goToDate']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.goToDate(...args));
	}


	public handleKey(...args: Parameters<CalendarComponentCustomElement['handleKey']>): ReturnType<CalendarComponentCustomElement['handleKey']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.handleKey(...args));
	}


	public layout(...args: Parameters<CalendarComponentCustomElement['layout']>): ReturnType<CalendarComponentCustomElement['layout']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.layout(...args));
	}


	public selectDate(...args: Parameters<CalendarComponentCustomElement['selectDate']>): ReturnType<CalendarComponentCustomElement['selectDate']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.selectDate(...args));
	}


	public setActiveDate(...args: Parameters<CalendarComponentCustomElement['setActiveDate']>): ReturnType<CalendarComponentCustomElement['setActiveDate']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.setActiveDate(...args));
	}


	public today(...args: Parameters<CalendarComponentCustomElement['today']>): ReturnType<CalendarComponentCustomElement['today']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.today(...args));
	}


	public toggleDate(...args: Parameters<CalendarComponentCustomElement['toggleDate']>): ReturnType<CalendarComponentCustomElement['toggleDate']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.toggleDate(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<CalendarComponentCustomElement>,
		protected zone: NgZone
	) {
		defineCalendarComponent();
		changeDetectorRef.detach();
	}
}
