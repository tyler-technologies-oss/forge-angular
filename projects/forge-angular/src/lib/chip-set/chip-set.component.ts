// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { ChipSetComponent as ChipSetComponentCustomElement, defineChipSetComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-chip-set',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ChipSetComponent {

	/** The forge-chip-set element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Whether the chip set is vertical. */
	@Input({ transform: booleanAttribute })
	public set vertical(value: ChipSetComponentCustomElement['vertical']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.vertical = value;
		});
	}
	public get vertical(): ChipSetComponentCustomElement['vertical'] {
		return this.nativeElement.vertical;
	}

	/** The type of chip. */
	@Input()
	public set type(value: ChipSetComponentCustomElement['type']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.type = value;
		});
	}
	public get type(): ChipSetComponentCustomElement['type'] {
		return this.nativeElement.type;
	}

	/** Whether the chip set is dense. */
	@Input({ transform: booleanAttribute })
	public set dense(value: ChipSetComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): ChipSetComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** Whether the chip set is disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: ChipSetComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): ChipSetComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** Whether the chip set is invalid. */
	@Input({ transform: booleanAttribute })
	public set invalid(value: ChipSetComponentCustomElement['invalid']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.invalid = value;
		});
	}
	public get invalid(): ChipSetComponentCustomElement['invalid'] {
		return this.nativeElement.invalid;
	}

	/** The theme of the chip set. */
	@Input()
	public set theme(value: ChipSetComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): ChipSetComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ChipSetComponentCustomElement>,
		protected zone: NgZone
	) {
		defineChipSetComponent();
		changeDetectorRef.detach();
	}
}
