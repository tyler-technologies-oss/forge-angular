// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { ChipSetComponent as ChipSetComponentCustomElement, defineChipSetComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-chip-set>` custom element. */
@Component({
  selector: 'forge-chip-set',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ChipSetComponent {


	@Input()
	public set vertical(value: ChipSetComponentCustomElement['vertical'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.vertical = value != null && `${value}` !== 'false';
		});
	}

	public get vertical(): ChipSetComponentCustomElement['vertical'] {
		return this.elementRef.nativeElement.vertical;
	}


	@Input()
	public set type(value: ChipSetComponentCustomElement['type']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.type = value;
		});
	}

	public get type(): ChipSetComponentCustomElement['type'] {
		return this.elementRef.nativeElement.type;
	}


	@Input()
	public set dense(value: ChipSetComponentCustomElement['dense'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';
		});
	}

	public get dense(): ChipSetComponentCustomElement['dense'] {
		return this.elementRef.nativeElement.dense;
	}


	@Input()
	public set disabled(value: ChipSetComponentCustomElement['disabled'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';
		});
	}

	public get disabled(): ChipSetComponentCustomElement['disabled'] {
		return this.elementRef.nativeElement.disabled;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ChipSetComponentCustomElement>,
		protected zone: NgZone
	) {
		defineChipSetComponent();
		changeDetectorRef.detach();
	}
}
