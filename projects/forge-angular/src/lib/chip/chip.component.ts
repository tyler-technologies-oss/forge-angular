// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { ChipComponent as ChipComponentCustomElement, defineChipComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-chip',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ChipComponent {

	/** The forge-chip element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The type of chip. */
	@Input()
	public set type(value: ChipComponentCustomElement['type']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.type = value;
		});
	}
	public get type(): ChipComponentCustomElement['type'] {
		return this.nativeElement.type;
	}

	/** The value of the chip. */
	@Input()
	public set value(value: ChipComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): ChipComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** Whether the chip is selected. */
	@Input({ transform: booleanAttribute })
	public set selected(value: ChipComponentCustomElement['selected']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.selected = value;
		});
	}
	public get selected(): ChipComponentCustomElement['selected'] {
		return this.nativeElement.selected;
	}

	/** Whether the chip is invalid. */
	@Input({ transform: booleanAttribute })
	public set invalid(value: ChipComponentCustomElement['invalid']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.invalid = value;
		});
	}
	public get invalid(): ChipComponentCustomElement['invalid'] {
		return this.nativeElement.invalid;
	}

	/** Whether the chip is disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: ChipComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): ChipComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** Whether the chip is dense. */
	@Input({ transform: booleanAttribute })
	public set dense(value: ChipComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): ChipComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** The theme of the chip. */
	@Input()
	public set theme(value: ChipComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): ChipComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}

	/** The href of the chip. */
	@Input()
	public set href(value: ChipComponentCustomElement['href']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.href = value;
		});
	}
	public get href(): ChipComponentCustomElement['href'] {
		return this.nativeElement.href;
	}

	/** The target of the chip. */
	@Input()
	public set target(value: ChipComponentCustomElement['target']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.target = value;
		});
	}
	public get target(): ChipComponentCustomElement['target'] {
		return this.nativeElement.target;
	}

	/** The download of the chip. */
	@Input()
	public set download(value: ChipComponentCustomElement['download']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.download = value;
		});
	}
	public get download(): ChipComponentCustomElement['download'] {
		return this.nativeElement.download;
	}

	/** The rel of the chip. */
	@Input()
	public set rel(value: ChipComponentCustomElement['rel']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.rel = value;
		});
	}
	public get rel(): ChipComponentCustomElement['rel'] {
		return this.nativeElement.rel;
	}


	public focus(...args: Parameters<ChipComponentCustomElement['focus']>): ReturnType<ChipComponentCustomElement['focus']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
	}


	public focusRemoveButton(...args: Parameters<ChipComponentCustomElement['focusRemoveButton']>): ReturnType<ChipComponentCustomElement['focusRemoveButton']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.focusRemoveButton(...args));
	}


	public click(...args: Parameters<ChipComponentCustomElement['click']>): ReturnType<ChipComponentCustomElement['click']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.click(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ChipComponentCustomElement>,
		protected zone: NgZone
	) {
		defineChipComponent();
		changeDetectorRef.detach();
	}
}
