// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { CircularProgressComponent as CircularProgressComponentCustomElement, defineCircularProgressComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-circular-progress>` custom element. */
@Component({
  selector: 'forge-circular-progress',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class CircularProgressComponent {

	/** The forge-circular-progress element. */
	public readonly nativeElement = this.elementRef.nativeElement;


	@Input({ transform: booleanAttribute })
	public set open(value: CircularProgressComponentCustomElement['open']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.open = value;
		});
	}
	public get open(): CircularProgressComponentCustomElement['open'] {
		return this.nativeElement.open;
	}


	@Input({ transform: booleanAttribute })
	public set determinate(value: CircularProgressComponentCustomElement['determinate']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.determinate = value;
		});
	}
	public get determinate(): CircularProgressComponentCustomElement['determinate'] {
		return this.nativeElement.determinate;
	}


	@Input({ transform: numberAttribute })
	public set progress(value: CircularProgressComponentCustomElement['progress']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.progress = value;
		});
	}
	public get progress(): CircularProgressComponentCustomElement['progress'] {
		return this.nativeElement.progress;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<CircularProgressComponentCustomElement>,
		protected zone: NgZone
	) {
		defineCircularProgressComponent();
		changeDetectorRef.detach();
	}
}
