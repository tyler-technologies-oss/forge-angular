// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { ColorPickerComponent as ColorPickerComponentCustomElement, defineColorPickerComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-color-picker',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ColorPickerComponent {

	/** The forge-color-picker element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Gets/sets the value using hex format only. */
	@Input()
	public set value(value: ColorPickerComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): ColorPickerComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** Gets/sets the value using rgba format. */
	@Input()
	public set rgba(value: ColorPickerComponentCustomElement['rgba']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.rgba = value;
		});
	}
	public get rgba(): ColorPickerComponentCustomElement['rgba'] {
		return this.nativeElement.rgba;
	}

	/** Gets/sets the value using hsva format. */
	@Input()
	public set hsva(value: ColorPickerComponentCustomElement['hsva']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.hsva = value;
		});
	}
	public get hsva(): ColorPickerComponentCustomElement['hsva'] {
		return this.nativeElement.hsva;
	}

	/** Gets/sets the opacity value, if `allowOpacity` is true. */
	@Input()
	public set opacity(value: ColorPickerComponentCustomElement['opacity']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.opacity = value;
		});
	}
	public get opacity(): ColorPickerComponentCustomElement['opacity'] {
		return this.nativeElement.opacity;
	}

	/** Gets/sets whether opacity is displayed and allowed be to changed. */
	@Input({ transform: booleanAttribute })
	public set allowOpacity(value: ColorPickerComponentCustomElement['allowOpacity']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.allowOpacity = value;
		});
	}
	public get allowOpacity(): ColorPickerComponentCustomElement['allowOpacity'] {
		return this.nativeElement.allowOpacity;
	}

	/** Gets/sets whether change event has a debounce applied to avoid successive updates. */
	@Input({ transform: booleanAttribute })
	public set debounceChangeEvent(value: ColorPickerComponentCustomElement['debounceChangeEvent']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.debounceChangeEvent = value;
		});
	}
	public get debounceChangeEvent(): ColorPickerComponentCustomElement['debounceChangeEvent'] {
		return this.nativeElement.debounceChangeEvent;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ColorPickerComponentCustomElement>,
		protected zone: NgZone
	) {
		defineColorPickerComponent();
		changeDetectorRef.detach();
	}
}
