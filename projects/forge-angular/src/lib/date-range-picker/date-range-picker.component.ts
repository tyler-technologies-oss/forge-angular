// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { DateRangePickerComponent as DateRangePickerComponentCustomElement, defineDateRangePickerComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-date-range-picker',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class DateRangePickerComponent {

	/** The forge-date-range-picker element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Gets/sets the "from" date range value. */
	@Input()
	public set from(value: DateRangePickerComponentCustomElement['from']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.from = value;
		});
	}
	public get from(): DateRangePickerComponentCustomElement['from'] {
		return this.nativeElement.from;
	}

	/** Gets/sets the "to" date range value. */
	@Input()
	public set to(value: DateRangePickerComponentCustomElement['to']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.to = value;
		});
	}
	public get to(): DateRangePickerComponentCustomElement['to'] {
		return this.nativeElement.to;
	}

	/** Gets/sets the date range value. */
	@Input()
	public set value(value: DateRangePickerComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): DateRangePickerComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** Gets/sets the minimum date range value. */
	@Input()
	public set min(value: DateRangePickerComponentCustomElement['min']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.min = value;
		});
	}
	public get min(): DateRangePickerComponentCustomElement['min'] {
		return this.nativeElement.min;
	}

	/** Gets/sets the maximum date range value. */
	@Input()
	public set max(value: DateRangePickerComponentCustomElement['max']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.max = value;
		});
	}
	public get max(): DateRangePickerComponentCustomElement['max'] {
		return this.nativeElement.max;
	}

	/** Gets/sets the disabled date range values. */
	@Input()
	public set disabledDates(value: DateRangePickerComponentCustomElement['disabledDates']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabledDates = value;
		});
	}
	public get disabledDates(): DateRangePickerComponentCustomElement['disabledDates'] {
		return this.nativeElement.disabledDates;
	}

	/** Gets/sets the open state of the date range picker. */
	@Input({ transform: booleanAttribute })
	public set open(value: DateRangePickerComponentCustomElement['open']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.open = value;
		});
	}
	public get open(): DateRangePickerComponentCustomElement['open'] {
		return this.nativeElement.open;
	}

	/** Gets/sets the callback used to parse date strings. */
	@Input()
	public set parseCallback(value: DateRangePickerComponentCustomElement['parseCallback']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.parseCallback = value;
		});
	}
	public get parseCallback(): DateRangePickerComponentCustomElement['parseCallback'] {
		return this.nativeElement.parseCallback;
	}

	/** Gets/sets the callback used to format date strings. */
	@Input()
	public set formatCallback(value: DateRangePickerComponentCustomElement['formatCallback']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.formatCallback = value;
		});
	}
	public get formatCallback(): DateRangePickerComponentCustomElement['formatCallback'] {
		return this.nativeElement.formatCallback;
	}

	/** Gets/sets the callback used to prepare the mask for the date input. */
	@Input()
	public set prepareMaskCallback(value: DateRangePickerComponentCustomElement['prepareMaskCallback']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.prepareMaskCallback = value;
		});
	}
	public get prepareMaskCallback(): DateRangePickerComponentCustomElement['prepareMaskCallback'] {
		return this.nativeElement.prepareMaskCallback;
	}

	/** Gets/sets the callback used to disable days in the calendar. */
	@Input()
	public set disableDayCallback(value: DateRangePickerComponentCustomElement['disableDayCallback']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disableDayCallback = value;
		});
	}
	public get disableDayCallback(): DateRangePickerComponentCustomElement['disableDayCallback'] {
		return this.nativeElement.disableDayCallback;
	}

	/** Gets/sets the classes to apply to the date range picker popup. */
	@Input()
	public set popupClasses(value: DateRangePickerComponentCustomElement['popupClasses']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupClasses = value;
		});
	}
	public get popupClasses(): DateRangePickerComponentCustomElement['popupClasses'] {
		return this.nativeElement.popupClasses;
	}

	/** Gets/sets the disabled state of the date range picker. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: DateRangePickerComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): DateRangePickerComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** Gets/sets the masked state of the date range picker. */
	@Input({ transform: booleanAttribute })
	public set masked(value: DateRangePickerComponentCustomElement['masked']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.masked = value;
		});
	}
	public get masked(): DateRangePickerComponentCustomElement['masked'] {
		return this.nativeElement.masked;
	}

	/** Gets/sets the mask format for the date input. */
	@Input()
	public set maskFormat(value: DateRangePickerComponentCustomElement['maskFormat']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.maskFormat = value;
		});
	}
	public get maskFormat(): DateRangePickerComponentCustomElement['maskFormat'] {
		return this.nativeElement.maskFormat;
	}

	/** Gets/sets the state of whether to show the mask format in the date input. */
	@Input({ transform: booleanAttribute })
	public set showMaskFormat(value: DateRangePickerComponentCustomElement['showMaskFormat']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.showMaskFormat = value;
		});
	}
	public get showMaskFormat(): DateRangePickerComponentCustomElement['showMaskFormat'] {
		return this.nativeElement.showMaskFormat;
	}

	/** Gets/sets the value mode of the date range picker. */
	@Input()
	public set valueMode(value: DateRangePickerComponentCustomElement['valueMode']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.valueMode = value;
		});
	}
	public get valueMode(): DateRangePickerComponentCustomElement['valueMode'] {
		return this.nativeElement.valueMode;
	}

	/** Gets/sets the state of whether to notify input value changes. */
	@Input({ transform: booleanAttribute })
	public set notifyInputValueChanges(value: DateRangePickerComponentCustomElement['notifyInputValueChanges']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.notifyInputValueChanges = value;
		});
	}
	public get notifyInputValueChanges(): DateRangePickerComponentCustomElement['notifyInputValueChanges'] {
		return this.nativeElement.notifyInputValueChanges;
	}

	/** Gets/sets the state of whether to allow invalid dates. */
	@Input({ transform: booleanAttribute })
	public set allowInvalidDate(value: DateRangePickerComponentCustomElement['allowInvalidDate']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.allowInvalidDate = value;
		});
	}
	public get allowInvalidDate(): DateRangePickerComponentCustomElement['allowInvalidDate'] {
		return this.nativeElement.allowInvalidDate;
	}

	/** Gets/sets the state of whether to show the "Today" button. */
	@Input({ transform: booleanAttribute })
	public set showToday(value: DateRangePickerComponentCustomElement['showToday']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.showToday = value;
		});
	}
	public get showToday(): DateRangePickerComponentCustomElement['showToday'] {
		return this.nativeElement.showToday;
	}

	/** Gets/sets the state of whether to show the "Clear" button. */
	@Input({ transform: booleanAttribute })
	public set showClear(value: DateRangePickerComponentCustomElement['showClear']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.showClear = value;
		});
	}
	public get showClear(): DateRangePickerComponentCustomElement['showClear'] {
		return this.nativeElement.showClear;
	}

	/** Gets/sets the disabled days of the week. */
	@Input()
	public set disabledDaysOfWeek(value: DateRangePickerComponentCustomElement['disabledDaysOfWeek']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabledDaysOfWeek = value;
		});
	}
	public get disabledDaysOfWeek(): DateRangePickerComponentCustomElement['disabledDaysOfWeek'] {
		return this.nativeElement.disabledDaysOfWeek;
	}

	/** Gets/sets the year range for the date range picker. */
	@Input()
	public set yearRange(value: DateRangePickerComponentCustomElement['yearRange']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.yearRange = value;
		});
	}
	public get yearRange(): DateRangePickerComponentCustomElement['yearRange'] {
		return this.nativeElement.yearRange;
	}

	/** Gets/sets the locale for the date range picker. */
	@Input()
	public set locale(value: DateRangePickerComponentCustomElement['locale']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.locale = value;
		});
	}
	public get locale(): DateRangePickerComponentCustomElement['locale'] {
		return this.nativeElement.locale;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<DateRangePickerComponentCustomElement>,
		protected zone: NgZone
	) {
		defineDateRangePickerComponent();
		changeDetectorRef.detach();
	}
}
