// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { DeprecatedButtonComponent as DeprecatedButtonComponentCustomElement, defineDeprecatedButtonComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-deprecated-button',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class DeprecatedButtonComponent {

	/** The forge-deprecated-button element. */
	public readonly nativeElement = this.elementRef.nativeElement;


	@Input()
	public set type(value: DeprecatedButtonComponentCustomElement['type']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.type = value;
		});
	}
	public get type(): DeprecatedButtonComponentCustomElement['type'] {
		return this.nativeElement.type;
	}


	@Input({ transform: booleanAttribute })
	public set disabled(value: DeprecatedButtonComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): DeprecatedButtonComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}


	@Input({ transform: booleanAttribute })
	public set fullWidth(value: DeprecatedButtonComponentCustomElement['fullWidth']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.fullWidth = value;
		});
	}
	public get fullWidth(): DeprecatedButtonComponentCustomElement['fullWidth'] {
		return this.nativeElement.fullWidth;
	}


	public focus(...args: Parameters<DeprecatedButtonComponentCustomElement['focus']>): ReturnType<DeprecatedButtonComponentCustomElement['focus']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<DeprecatedButtonComponentCustomElement>,
		protected zone: NgZone
	) {
		defineDeprecatedButtonComponent();
		changeDetectorRef.detach();
	}
}
