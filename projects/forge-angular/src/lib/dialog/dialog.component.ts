// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { DialogComponent as DialogComponentCustomElement, defineDialogComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-dialog>` custom element. */
@Component({
  selector: 'forge-dialog',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class DialogComponent {

	/** Controls whether clicking the backdrop closes the dialog or not. Default is true. */
	@Input()
	public set backdropClose(value: DialogComponentCustomElement['backdropClose'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.backdropClose = value != null && `${value}` !== 'false';
		});
	}

	public get backdropClose(): DialogComponentCustomElement['backdropClose'] {
		return this.elementRef.nativeElement.backdropClose;
	}

	/** Controls whether pressing the escape key closes the dialog or not. Default is true. */
	@Input()
	public set escapeClose(value: DialogComponentCustomElement['escapeClose'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.escapeClose = value != null && `${value}` !== 'false';
		});
	}

	public get escapeClose(): DialogComponentCustomElement['escapeClose'] {
		return this.elementRef.nativeElement.escapeClose;
	}

	/** Controls whether the dialog is open or not. Default is false. */
	@Input()
	public set open(value: DialogComponentCustomElement['open'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';
		});
	}

	public get open(): DialogComponentCustomElement['open'] {
		return this.elementRef.nativeElement.open;
	}

	/** Controls whether the dialog is full screen or not. Default is false. */
	@Input()
	public set fullscreen(value: DialogComponentCustomElement['fullscreen'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.fullscreen = value != null && `${value}` !== 'false';
		});
	}

	public get fullscreen(): DialogComponentCustomElement['fullscreen'] {
		return this.elementRef.nativeElement.fullscreen;
	}

	/** The function to call when the dialog wants to open. */
	@Input()
	public set openCallback(value: DialogComponentCustomElement['openCallback']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.openCallback = value;
		});
	}

	public get openCallback(): DialogComponentCustomElement['openCallback'] {
		return this.elementRef.nativeElement.openCallback;
	}

	/** the function to call when the dialog wants to close. */
	@Input()
	public set closeCallback(value: DialogComponentCustomElement['closeCallback']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.closeCallback = value;
		});
	}

	public get closeCallback(): DialogComponentCustomElement['closeCallback'] {
		return this.elementRef.nativeElement.closeCallback;
	}

	/** the function to call when the dialog wants to close. */
	@Input()
	public set beforeCloseCallback(value: DialogComponentCustomElement['beforeCloseCallback']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.beforeCloseCallback = value;
		});
	}

	public get beforeCloseCallback(): DialogComponentCustomElement['beforeCloseCallback'] {
		return this.elementRef.nativeElement.beforeCloseCallback;
	}

	/** Gets/sets the position type when using custom positioning values. Default is 'absolute'. */
	@Input()
	public set positionType(value: DialogComponentCustomElement['positionType']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.positionType = value;
		});
	}

	public get positionType(): DialogComponentCustomElement['positionType'] {
		return this.elementRef.nativeElement.positionType;
	}

	/** Controls the horizontal position of the dialog surface. */
	@Input()
	public set positionX(value: DialogComponentCustomElement['positionX']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.positionX = value;
		});
	}

	public get positionX(): DialogComponentCustomElement['positionX'] {
		return this.elementRef.nativeElement.positionX;
	}

	/** Controls the vertical position of the dialog surface. */
	@Input()
	public set positionY(value: DialogComponentCustomElement['positionY']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.positionY = value;
		});
	}

	public get positionY(): DialogComponentCustomElement['positionY'] {
		return this.elementRef.nativeElement.positionY;
	}

	/** Gets/sets whether the dialog surface can be moved or not. */
	@Input()
	public set moveable(value: DialogComponentCustomElement['moveable'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.moveable = value != null && `${value}` !== 'false';
		});
	}

	public get moveable(): DialogComponentCustomElement['moveable'] {
		return this.elementRef.nativeElement.moveable;
	}

	/** Gets/sets the selector used to target the element that is used as the drag target. */
	@Input()
	public set moveTarget(value: DialogComponentCustomElement['moveTarget']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.moveTarget = value;
		});
	}

	public get moveTarget(): DialogComponentCustomElement['moveTarget'] {
		return this.elementRef.nativeElement.moveTarget;
	}


	public initializeMoveTarget(...args: Parameters<DialogComponentCustomElement['initializeMoveTarget']>): ReturnType<DialogComponentCustomElement['initializeMoveTarget']> {
		return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializeMoveTarget(...args));
	}


	public resetPosition(...args: Parameters<DialogComponentCustomElement['resetPosition']>): ReturnType<DialogComponentCustomElement['resetPosition']> {
		return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.resetPosition(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<DialogComponentCustomElement>,
		protected zone: NgZone
	) {
		defineDialogComponent();
		changeDetectorRef.detach();
	}
}
