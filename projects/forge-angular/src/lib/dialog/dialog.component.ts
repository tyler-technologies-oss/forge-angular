// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input, inject } from '@angular/core';
import { DialogComponent as DialogComponentCustomElement, defineDialogComponent } from '@tylertech/forge';

/**  */
@Component({
    selector: 'forge-dialog',
    changeDetection: ChangeDetectionStrategy.OnPush,
    template: '<ng-content />',
    standalone: false
})
export class DialogComponent {
	protected elementRef = inject<ElementRef<DialogComponentCustomElement>>(ElementRef);
	protected zone = inject(NgZone);


	/** The forge-dialog element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Indicates whether the dialog is open. */
	@Input({ transform: booleanAttribute })
	public set open(value: DialogComponentCustomElement['open']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.open = value;
		});
	}
	public get open(): DialogComponentCustomElement['open'] {
		return this.nativeElement.open;
	}

	/** The mode of the dialog. */
	@Input()
	public set mode(value: DialogComponentCustomElement['mode']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.mode = value;
		});
	}
	public get mode(): DialogComponentCustomElement['mode'] {
		return this.nativeElement.mode;
	}

	/** The type of the dialog. */
	@Input()
	public set type(value: DialogComponentCustomElement['type']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.type = value;
		});
	}
	public get type(): DialogComponentCustomElement['type'] {
		return this.nativeElement.type;
	}

	/** The animation type of the dialog. */
	@Input()
	public set animationType(value: DialogComponentCustomElement['animationType']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.animationType = value;
		});
	}
	public get animationType(): DialogComponentCustomElement['animationType'] {
		return this.nativeElement.animationType;
	}

	/** The preset design that the dialog will apply. */
	@Input()
	public set preset(value: DialogComponentCustomElement['preset']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.preset = value;
		});
	}
	public get preset(): DialogComponentCustomElement['preset'] {
		return this.nativeElement.preset;
	}

	/** Indicates whether the dialog is dismissible via escape and backdrop click or not. */
	@Input({ transform: booleanAttribute })
	public set persistent(value: DialogComponentCustomElement['persistent']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.persistent = value;
		});
	}
	public get persistent(): DialogComponentCustomElement['persistent'] {
		return this.nativeElement.persistent;
	}

	/** Indicates whether the dialog is fullscreen or not. */
	@Input({ transform: booleanAttribute })
	public set fullscreen(value: DialogComponentCustomElement['fullscreen']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.fullscreen = value;
		});
	}
	public get fullscreen(): DialogComponentCustomElement['fullscreen'] {
		return this.nativeElement.fullscreen;
	}

	/** The screen width at which the dialog will switch to fullscreen. */
	@Input({ transform: numberAttribute })
	public set fullscreenThreshold(value: DialogComponentCustomElement['fullscreenThreshold']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.fullscreenThreshold = value;
		});
	}
	public get fullscreenThreshold(): DialogComponentCustomElement['fullscreenThreshold'] {
		return this.nativeElement.fullscreenThreshold;
	}

	/** The selector of the element that triggers the dialog. */
	@Input()
	public set trigger(value: DialogComponentCustomElement['trigger']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.trigger = value;
		});
	}
	public get trigger(): DialogComponentCustomElement['trigger'] {
		return this.nativeElement.trigger;
	}

	/** The element that triggers the dialog. */
	@Input()
	public set triggerElement(value: DialogComponentCustomElement['triggerElement']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.triggerElement = value;
		});
	}
	public get triggerElement(): DialogComponentCustomElement['triggerElement'] {
		return this.nativeElement.triggerElement;
	}

	/** Indicates whether the dialog is moveable or not. */
	@Input({ transform: booleanAttribute })
	public set moveable(value: DialogComponentCustomElement['moveable']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.moveable = value;
		});
	}
	public get moveable(): DialogComponentCustomElement['moveable'] {
		return this.nativeElement.moveable;
	}

	/** Controls whether the dialog is rendered relative to the viewport or its nearest containing block. */
	@Input()
	public set positionStrategy(value: DialogComponentCustomElement['positionStrategy']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.positionStrategy = value;
		});
	}
	public get positionStrategy(): DialogComponentCustomElement['positionStrategy'] {
		return this.nativeElement.positionStrategy;
	}

	/** Controls the block and/or inline size of the dialog. Defaults to the size of the content it contains. */
	@Input()
	public set sizeStrategy(value: DialogComponentCustomElement['sizeStrategy']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.sizeStrategy = value;
		});
	}
	public get sizeStrategy(): DialogComponentCustomElement['sizeStrategy'] {
		return this.nativeElement.sizeStrategy;
	}

	/** The placement of the dialog. */
	@Input()
	public set placement(value: DialogComponentCustomElement['placement']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.placement = value;
		});
	}
	public get placement(): DialogComponentCustomElement['placement'] {
		return this.nativeElement.placement;
	}

	/** The accessible label of the dialog. */
	@Input()
	public set label(value: DialogComponentCustomElement['label']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.label = value;
		});
	}
	public get label(): DialogComponentCustomElement['label'] {
		return this.nativeElement.label;
	}

	/** The accessible description of the dialog. */
	@Input()
	public set description(value: DialogComponentCustomElement['description']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.description = value;
		});
	}
	public get description(): DialogComponentCustomElement['description'] {
		return this.nativeElement.description;
	}

	/** Shows the dialog. */
	public show(...args: Parameters<DialogComponentCustomElement['show']>): ReturnType<DialogComponentCustomElement['show']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.show(...args));
	}

	/** Hides the dialog. */
	public hide(...args: Parameters<DialogComponentCustomElement['hide']>): ReturnType<DialogComponentCustomElement['hide']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.hide(...args));
	}

	constructor() {
		const changeDetectorRef = inject(ChangeDetectorRef);

		defineDialogComponent();
		changeDetectorRef.detach();
	}
}
