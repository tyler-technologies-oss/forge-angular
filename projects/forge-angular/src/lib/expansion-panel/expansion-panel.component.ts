// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { ExpansionPanelComponent as ExpansionPanelComponentCustomElement, defineExpansionPanelComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-expansion-panel',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ExpansionPanelComponent {

	/** The forge-expansion-panel element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Whether the panel is open or closed. */
	@Input({ transform: booleanAttribute })
	public set open(value: ExpansionPanelComponentCustomElement['open']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.open = value;
		});
	}
	public get open(): ExpansionPanelComponentCustomElement['open'] {
		return this.nativeElement.open;
	}

	/** The orientation of the panel. */
	@Input()
	public set orientation(value: ExpansionPanelComponentCustomElement['orientation']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.orientation = value;
		});
	}
	public get orientation(): ExpansionPanelComponentCustomElement['orientation'] {
		return this.nativeElement.orientation;
	}

	/** The type of animation to use when opening/closing the panel. */
	@Input()
	public set animationType(value: ExpansionPanelComponentCustomElement['animationType']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.animationType = value;
		});
	}
	public get animationType(): ExpansionPanelComponentCustomElement['animationType'] {
		return this.nativeElement.animationType;
	}

	/** Toggles the open state of the panel. */
	public toggle(...args: Parameters<ExpansionPanelComponentCustomElement['toggle']>): ReturnType<ExpansionPanelComponentCustomElement['toggle']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.toggle(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ExpansionPanelComponentCustomElement>,
		protected zone: NgZone
	) {
		defineExpansionPanelComponent();
		changeDetectorRef.detach();
	}
}
