// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { FloatingActionButtonComponent as FloatingActionButtonComponentCustomElement, defineFloatingActionButtonComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-fab',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class FloatingActionButtonComponent {

	/** The forge-fab element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Sets the theme of the button. */
	@Input()
	public set theme(value: FloatingActionButtonComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): FloatingActionButtonComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}

	/** Sets the density of the button. */
	@Input()
	public set density(value: FloatingActionButtonComponentCustomElement['density']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.density = value;
		});
	}
	public get density(): FloatingActionButtonComponentCustomElement['density'] {
		return this.nativeElement.density;
	}

	/** Sets the elevation of the button. */
	@Input()
	public set elevation(value: FloatingActionButtonComponentCustomElement['elevation']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.elevation = value;
		});
	}
	public get elevation(): FloatingActionButtonComponentCustomElement['elevation'] {
		return this.nativeElement.elevation;
	}


	public get form(): FloatingActionButtonComponentCustomElement['form'] {
		return this.nativeElement.form;
	}

	/** The name of the button. */
	@Input()
	public set name(value: FloatingActionButtonComponentCustomElement['name']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.name = value;
		});
	}
	public get name(): FloatingActionButtonComponentCustomElement['name'] {
		return this.nativeElement.name;
	}

	/** The value of the button. */
	@Input()
	public set value(value: FloatingActionButtonComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): FloatingActionButtonComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** Sets the type of the button. Possible values are `button`, `submit`, and `reset`. */
	@Input()
	public set type(value: FloatingActionButtonComponentCustomElement['type']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.type = value;
		});
	}
	public get type(): FloatingActionButtonComponentCustomElement['type'] {
		return this.nativeElement.type;
	}

	/** Disables the button. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: FloatingActionButtonComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): FloatingActionButtonComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** Shows a popover icon on the button. */
	@Input({ transform: booleanAttribute })
	public set popoverIcon(value: FloatingActionButtonComponentCustomElement['popoverIcon']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverIcon = value;
		});
	}
	public get popoverIcon(): FloatingActionButtonComponentCustomElement['popoverIcon'] {
		return this.nativeElement.popoverIcon;
	}

	/** Sets the density of the button. */
	@Input({ transform: booleanAttribute })
	public set dense(value: FloatingActionButtonComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): FloatingActionButtonComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** Clicks the button. */
	public click(...args: Parameters<FloatingActionButtonComponentCustomElement['click']>): ReturnType<FloatingActionButtonComponentCustomElement['click']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.click(...args));
	}

	/** Focuses the button. */
	public focus(...args: Parameters<FloatingActionButtonComponentCustomElement['focus']>): ReturnType<FloatingActionButtonComponentCustomElement['focus']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<FloatingActionButtonComponentCustomElement>,
		protected zone: NgZone
	) {
		defineFloatingActionButtonComponent();
		changeDetectorRef.detach();
	}
}
