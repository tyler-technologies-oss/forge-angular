// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { FloatingActionButton as FloatingActionButtonCustomElement, defineFloatingActionButtonComponent } from '@tylertech/forge';

/** The custom element class behind the `<forge-fab>` element. */
@Component({
  selector: 'forge-fab',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class FloatingActionButton {

	/** The forge-fab element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Gets/sets the exited state. */
	@Input({ transform: booleanAttribute })
	public set exited(value: FloatingActionButtonCustomElement['exited']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.exited = value;
		});
	}
	public get exited(): FloatingActionButtonCustomElement['exited'] {
		return this.nativeElement.exited;
	}

	/** Gets/sets the mini state. */
	@Input({ transform: booleanAttribute })
	public set mini(value: FloatingActionButtonCustomElement['mini']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.mini = value;
		});
	}
	public get mini(): FloatingActionButtonCustomElement['mini'] {
		return this.nativeElement.mini;
	}

	/** Gets/sets the extended state. */
	@Input({ transform: booleanAttribute })
	public set extended(value: FloatingActionButtonCustomElement['extended']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.extended = value;
		});
	}
	public get extended(): FloatingActionButtonCustomElement['extended'] {
		return this.nativeElement.extended;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<FloatingActionButtonCustomElement>,
		protected zone: NgZone
	) {
		defineFloatingActionButtonComponent();
		changeDetectorRef.detach();
	}
}
