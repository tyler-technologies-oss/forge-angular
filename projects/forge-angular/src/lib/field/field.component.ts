// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { FieldComponent as FieldComponentCustomElement, defineFieldComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-field',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class FieldComponent {

	/** The forge-field element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The position of the label relative to the input area. */
	@Input()
	public set labelPosition(value: FieldComponentCustomElement['labelPosition']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labelPosition = value;
		});
	}
	public get labelPosition(): FieldComponentCustomElement['labelPosition'] {
		return this.nativeElement.labelPosition;
	}

	/** The alignment of the label relative to the input area. */
	@Input()
	public set labelAlignment(value: FieldComponentCustomElement['labelAlignment']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labelAlignment = value;
		});
	}
	public get labelAlignment(): FieldComponentCustomElement['labelAlignment'] {
		return this.nativeElement.labelAlignment;
	}

	/** Whether an inset positioned label is floated to the top of the container. */
	@Input({ transform: booleanAttribute })
	public set floatLabel(value: FieldComponentCustomElement['floatLabel']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.floatLabel = value;
		});
	}
	public get floatLabel(): FieldComponentCustomElement['floatLabel'] {
		return this.nativeElement.floatLabel;
	}

	/** Whether the field is in an invalid state. */
	@Input({ transform: booleanAttribute })
	public set invalid(value: FieldComponentCustomElement['invalid']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.invalid = value;
		});
	}
	public get invalid(): FieldComponentCustomElement['invalid'] {
		return this.nativeElement.invalid;
	}

	/** Whether the field is required. */
	@Input({ transform: booleanAttribute })
	public set required(value: FieldComponentCustomElement['required']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.required = value;
		});
	}
	public get required(): FieldComponentCustomElement['required'] {
		return this.nativeElement.required;
	}

	/** Whether the field is optional. */
	@Input({ transform: booleanAttribute })
	public set optional(value: FieldComponentCustomElement['optional']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.optional = value;
		});
	}
	public get optional(): FieldComponentCustomElement['optional'] {
		return this.nativeElement.optional;
	}

	/** Whether the field is disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: FieldComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): FieldComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** The variant of the field. */
	@Input()
	public set variant(value: FieldComponentCustomElement['variant']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.variant = value;
		});
	}
	public get variant(): FieldComponentCustomElement['variant'] {
		return this.nativeElement.variant;
	}

	/** The theme of the field. */
	@Input()
	public set theme(value: FieldComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): FieldComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}

	/** The border radius of the field's corners. */
	@Input()
	public set shape(value: FieldComponentCustomElement['shape']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.shape = value;
		});
	}
	public get shape(): FieldComponentCustomElement['shape'] {
		return this.nativeElement.shape;
	}

	/** The density of the field. */
	@Input()
	public set density(value: FieldComponentCustomElement['density']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.density = value;
		});
	}
	public get density(): FieldComponentCustomElement['density'] {
		return this.nativeElement.density;
	}

	/** Whether the field is at the "extra-small" density level. */
	@Input({ transform: booleanAttribute })
	public set dense(value: FieldComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): FieldComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** Whether the field has a popover icon. */
	@Input({ transform: booleanAttribute })
	public set popoverIcon(value: FieldComponentCustomElement['popoverIcon']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverIcon = value;
		});
	}
	public get popoverIcon(): FieldComponentCustomElement['popoverIcon'] {
		return this.nativeElement.popoverIcon;
	}

	/** Whether the field's popover icon is in the expanded orientation. */
	@Input({ transform: booleanAttribute })
	public set popoverExpanded(value: FieldComponentCustomElement['popoverExpanded']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverExpanded = value;
		});
	}
	public get popoverExpanded(): FieldComponentCustomElement['popoverExpanded'] {
		return this.nativeElement.popoverExpanded;
	}

	/** Whether the field contains a multiline input. */
	@Input({ transform: booleanAttribute })
	public set multiline(value: FieldComponentCustomElement['multiline']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.multiline = value;
		});
	}
	public get multiline(): FieldComponentCustomElement['multiline'] {
		return this.nativeElement.multiline;
	}

	/** Whether the field's support text is inset from either side. */
	@Input()
	public set supportTextInset(value: FieldComponentCustomElement['supportTextInset']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.supportTextInset = value;
		});
	}
	public get supportTextInset(): FieldComponentCustomElement['supportTextInset'] {
		return this.nativeElement.supportTextInset;
	}

	/** The element to attach the focus indicator to. */
	@Input()
	public set focusIndicatorTargetElement(value: FieldComponentCustomElement['focusIndicatorTargetElement']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.focusIndicatorTargetElement = value;
		});
	}
	public get focusIndicatorTargetElement(): FieldComponentCustomElement['focusIndicatorTargetElement'] {
		return this.nativeElement.focusIndicatorTargetElement;
	}

	/** The focus mode to use on the focus indicator. */
	@Input()
	public set focusIndicatorFocusMode(value: FieldComponentCustomElement['focusIndicatorFocusMode']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.focusIndicatorFocusMode = value;
		});
	}
	public get focusIndicatorFocusMode(): FieldComponentCustomElement['focusIndicatorFocusMode'] {
		return this.nativeElement.focusIndicatorFocusMode;
	}

	/** Whether the focus indicator should render when the target element matches `:focus` instead of `:focus-visible`. */
	@Input({ transform: booleanAttribute })
	public set focusIndicatorAllowFocus(value: FieldComponentCustomElement['focusIndicatorAllowFocus']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.focusIndicatorAllowFocus = value;
		});
	}
	public get focusIndicatorAllowFocus(): FieldComponentCustomElement['focusIndicatorAllowFocus'] {
		return this.nativeElement.focusIndicatorAllowFocus;
	}

	/** Sets the floating label without animating the transition. */
	public floatLabelWithoutAnimation(...args: Parameters<FieldComponentCustomElement['floatLabelWithoutAnimation']>): ReturnType<FieldComponentCustomElement['floatLabelWithoutAnimation']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.floatLabelWithoutAnimation(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<FieldComponentCustomElement>,
		protected zone: NgZone
	) {
		defineFieldComponent();
		changeDetectorRef.detach();
	}
}
