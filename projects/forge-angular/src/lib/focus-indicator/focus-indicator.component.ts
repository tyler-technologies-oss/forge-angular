// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { FocusIndicatorComponent as FocusIndicatorComponentCustomElement, defineFocusIndicatorComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-focus-indicator',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class FocusIndicatorComponent {

	/** The forge-focus-indicator element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The element to attach the focus indicator to. */
	@Input()
	public set targetElement(value: FocusIndicatorComponentCustomElement['targetElement']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.targetElement = value;
		});
	}
	public get targetElement(): FocusIndicatorComponentCustomElement['targetElement'] {
		return this.nativeElement.targetElement;
	}

	/** The id of the element to attach the focus indicator to. */
	@Input()
	public set target(value: FocusIndicatorComponentCustomElement['target']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.target = value;
		});
	}
	public get target(): FocusIndicatorComponentCustomElement['target'] {
		return this.nativeElement.target;
	}

	/** Controls whether the indicator is active. */
	@Input({ transform: booleanAttribute })
	public set active(value: FocusIndicatorComponentCustomElement['active']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.active = value;
		});
	}
	public get active(): FocusIndicatorComponentCustomElement['active'] {
		return this.nativeElement.active;
	}

	/** Controls whether the indicator renders inward. */
	@Input({ transform: booleanAttribute })
	public set inward(value: FocusIndicatorComponentCustomElement['inward']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.inward = value;
		});
	}
	public get inward(): FocusIndicatorComponentCustomElement['inward'] {
		return this.nativeElement.inward;
	}

	/** Controls whether the indicator renders circular. */
	@Input({ transform: booleanAttribute })
	public set circular(value: FocusIndicatorComponentCustomElement['circular']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.circular = value;
		});
	}
	public get circular(): FocusIndicatorComponentCustomElement['circular'] {
		return this.nativeElement.circular;
	}

	/** Controls whether the indicator renders when the target element matches `:focus` instead of `:focus-visible`. */
	@Input({ transform: booleanAttribute })
	public set allowFocus(value: FocusIndicatorComponentCustomElement['allowFocus']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.allowFocus = value;
		});
	}
	public get allowFocus(): FocusIndicatorComponentCustomElement['allowFocus'] {
		return this.nativeElement.allowFocus;
	}

	/** The focus mode to use. Defaults to `focusin`. */
	@Input()
	public set focusMode(value: FocusIndicatorComponentCustomElement['focusMode']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.focusMode = value;
		});
	}
	public get focusMode(): FocusIndicatorComponentCustomElement['focusMode'] {
		return this.nativeElement.focusMode;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<FocusIndicatorComponentCustomElement>,
		protected zone: NgZone
	) {
		defineFocusIndicatorComponent();
		changeDetectorRef.detach();
	}
}
