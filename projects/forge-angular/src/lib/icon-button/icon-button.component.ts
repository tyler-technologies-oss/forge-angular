// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { IconButtonComponent as IconButtonComponentCustomElement, defineIconButtonComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-icon-button',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class IconButtonComponent {

	/** The forge-icon-button element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Whether or not the icon button can be toggled. */
	@Input({ transform: booleanAttribute })
	public set toggle(value: IconButtonComponentCustomElement['toggle']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.toggle = value;
		});
	}
	public get toggle(): IconButtonComponentCustomElement['toggle'] {
		return this.nativeElement.toggle;
	}

	/** Whether or not the button is on. Only applies when `toggle` is `true`. */
	@Input({ transform: booleanAttribute })
	public set on(value: IconButtonComponentCustomElement['on']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.on = value;
		});
	}
	public get on(): IconButtonComponentCustomElement['on'] {
		return this.nativeElement.on;
	}

	/** The theme of the button. Valid values are `primary`, `secondary`, `tertiary`, `success`, `error`, `warning`, `info`. */
	@Input()
	public set theme(value: IconButtonComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): IconButtonComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}

	/** The variant of the button. Valid values are `text`, `outlined`, `filled`, and `raised`. */
	@Input()
	public set variant(value: IconButtonComponentCustomElement['variant']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.variant = value;
		});
	}
	public get variant(): IconButtonComponentCustomElement['variant'] {
		return this.nativeElement.variant;
	}

	/** The shape of the button. Valid values are `circular` and `squared`. */
	@Input()
	public set shape(value: IconButtonComponentCustomElement['shape']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.shape = value;
		});
	}
	public get shape(): IconButtonComponentCustomElement['shape'] {
		return this.nativeElement.shape;
	}

	/** The density of the button. Valid values are `small`, `medium`, and `large`. */
	@Input()
	public set density(value: IconButtonComponentCustomElement['density']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.density = value;
		});
	}
	public get density(): IconButtonComponentCustomElement['density'] {
		return this.nativeElement.density;
	}

	/** The type of button. Defaults to `button`. Valid values are `button`, `submit`, and `reset`. */
	@Input()
	public set type(value: IconButtonComponentCustomElement['type']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.type = value;
		});
	}
	public get type(): IconButtonComponentCustomElement['type'] {
		return this.nativeElement.type;
	}

	/** Whether or not the button is disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: IconButtonComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): IconButtonComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** Whether or not the button shows a built-in popover icon. */
	@Input({ transform: booleanAttribute })
	public set popoverIcon(value: IconButtonComponentCustomElement['popoverIcon']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverIcon = value;
		});
	}
	public get popoverIcon(): IconButtonComponentCustomElement['popoverIcon'] {
		return this.nativeElement.popoverIcon;
	}

	/** Whether or not the button is dense. */
	@Input({ transform: booleanAttribute })
	public set dense(value: IconButtonComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): IconButtonComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** The name of the button. */
	@Input()
	public set name(value: IconButtonComponentCustomElement['name']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.name = value;
		});
	}
	public get name(): IconButtonComponentCustomElement['name'] {
		return this.nativeElement.name;
	}

	/** The form value of the button. */
	@Input()
	public set value(value: IconButtonComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): IconButtonComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** The form reference of the button if within a `<form>` element. */
	public get form(): IconButtonComponentCustomElement['form'] {
		return this.nativeElement.form;
	}

	/** Clicks the button. */
	public click(...args: Parameters<IconButtonComponentCustomElement['click']>): ReturnType<IconButtonComponentCustomElement['click']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.click(...args));
	}

	/** Focuses the button. */
	public focus(...args: Parameters<IconButtonComponentCustomElement['focus']>): ReturnType<IconButtonComponentCustomElement['focus']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<IconButtonComponentCustomElement>,
		protected zone: NgZone
	) {
		defineIconButtonComponent();
		changeDetectorRef.detach();
	}
}
