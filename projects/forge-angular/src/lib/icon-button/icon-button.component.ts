// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { IconButtonComponent as IconButtonComponentCustomElement, defineIconButtonComponent } from '@tylertech/forge';

/** The custom element class behind the `<forge-icon-button>` element. */
@Component({
  selector: 'forge-icon-button',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class IconButtonComponent {

	/** The forge-icon-button element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Gets/sets whether the button is togglable. */
	@Input({ transform: booleanAttribute })
	public set toggle(value: IconButtonComponentCustomElement['toggle']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.toggle = value;
		});
	}
	public get toggle(): IconButtonComponentCustomElement['toggle'] {
		return this.nativeElement.toggle;
	}

	/** Gets/sets the toggled state of the icon button. Only applies when `toggle = true`. */
	@Input({ transform: booleanAttribute })
	public set isOn(value: IconButtonComponentCustomElement['isOn']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.isOn = value;
		});
	}
	public get isOn(): IconButtonComponentCustomElement['isOn'] {
		return this.nativeElement.isOn;
	}

	/** Gets/sets whether the icon button is dense. */
	@Input({ transform: booleanAttribute })
	public set dense(value: IconButtonComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): IconButtonComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** Controls the density level. 1 (least dense) to 6 (most dense). */
	@Input({ transform: numberAttribute })
	public set densityLevel(value: IconButtonComponentCustomElement['densityLevel']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.densityLevel = value;
		});
	}
	public get densityLevel(): IconButtonComponentCustomElement['densityLevel'] {
		return this.nativeElement.densityLevel;
	}


	public layout(...args: Parameters<IconButtonComponentCustomElement['layout']>): ReturnType<IconButtonComponentCustomElement['layout']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.layout(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<IconButtonComponentCustomElement>,
		protected zone: NgZone
	) {
		defineIconButtonComponent();
		changeDetectorRef.detach();
	}
}
