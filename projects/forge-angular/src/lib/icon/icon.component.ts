// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { IconComponent as IconComponentCustomElement, defineIconComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-icon>` custom element. */
@Component({
  selector: 'forge-icon',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class IconComponent {

	/** The name of the icon within the icon registry to be used. */
	@Input()
	public set name(value: IconComponentCustomElement['name']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.name = value;
		});
	}

	public get name(): IconComponentCustomElement['name'] {
		return this.elementRef.nativeElement.name;
	}

	/** Provides the ability to set the SVG string content directly. */
	@Input()
	public set src(value: IconComponentCustomElement['src']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.src = value;
		});
	}

	public get src(): IconComponentCustomElement['src'] {
		return this.elementRef.nativeElement.src;
	}

	/** Controls whether the icon will be loaded dynamically when it comes into view. False by default. */
	@Input()
	public set lazy(value: IconComponentCustomElement['lazy'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.lazy = value != null && `${value}` !== 'false';
		});
	}

	public get lazy(): IconComponentCustomElement['lazy'] {
		return this.elementRef.nativeElement.lazy;
	}

	/** Controls whether external network requests are allowed for this icon. Only pertains for icons that aren't defined in the registry. */
	@Input()
	public set external(value: IconComponentCustomElement['external'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.external = value != null && `${value}` !== 'false';
		});
	}

	public get external(): IconComponentCustomElement['external'] {
		return this.elementRef.nativeElement.external;
	}

	/** The type of icon to load externally. Possible values: "standard", "extended", "custom". */
	@Input()
	public set externalType(value: IconComponentCustomElement['externalType']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.externalType = value;
		});
	}

	public get externalType(): IconComponentCustomElement['externalType'] {
		return this.elementRef.nativeElement.externalType;
	}

	/** A callback that can be provided to generate a URL that will be used to fetch an SVG icon. */
	@Input()
	public set externalUrlBuilder(value: IconComponentCustomElement['externalUrlBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.externalUrlBuilder = value;
		});
	}

	public get externalUrlBuilder(): IconComponentCustomElement['externalUrlBuilder'] {
		return this.elementRef.nativeElement.externalUrlBuilder;
	}

	/** A custom value to apply to the `viewBox` attribute on the internal `<svg>` element. */
	@Input()
	public set viewbox(value: IconComponentCustomElement['viewbox']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.viewbox = value;
		});
	}

	public get viewbox(): IconComponentCustomElement['viewbox'] {
		return this.elementRef.nativeElement.viewbox;
	}

	/** Forces a reload of the icon. */
	public layout(...args: Parameters<IconComponentCustomElement['layout']>): ReturnType<IconComponentCustomElement['layout']> {
		return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.layout(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<IconComponentCustomElement>,
		protected zone: NgZone
	) {
		defineIconComponent();
		changeDetectorRef.detach();
	}
}
