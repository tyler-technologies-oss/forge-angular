// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { KeyboardShortcutComponent as KeyboardShortcutComponentCustomElement, defineKeyboardShortcutComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-keyboard-shortcut>` custom element. */
@Component({
  selector: 'forge-keyboard-shortcut',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class KeyboardShortcutComponent {

	/** Gets/sets the key binding. */
	@Input()
	public set key(value: KeyboardShortcutComponentCustomElement['key']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.key = value;
		});
	}

	public get key(): KeyboardShortcutComponentCustomElement['key'] {
		return this.elementRef.nativeElement.key;
	}

	/** Alias for key. */
	@Input()
	public set keyBinding(value: KeyboardShortcutComponentCustomElement['keyBinding']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.keyBinding = value;
		});
	}

	public get keyBinding(): KeyboardShortcutComponentCustomElement['keyBinding'] {
		return this.elementRef.nativeElement.keyBinding;
	}

	/** Gets/sets the target element selector. */
	@Input()
	public set target(value: KeyboardShortcutComponentCustomElement['target']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.target = value;
		});
	}

	public get target(): KeyboardShortcutComponentCustomElement['target'] {
		return this.elementRef.nativeElement.target;
	}

	/** Gets/sets the global listener state. */
	@Input()
	public set global(value: KeyboardShortcutComponentCustomElement['global'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.global = value != null && `${value}` !== 'false';
		});
	}

	public get global(): KeyboardShortcutComponentCustomElement['global'] {
		return this.elementRef.nativeElement.global;
	}

	/** Gets/sets whether the callback will be called while in a text entry field. */
	@Input()
	public set allowWhileTyping(value: KeyboardShortcutComponentCustomElement['allowWhileTyping'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.allowWhileTyping = value != null && `${value}` !== 'false';
		});
	}

	public get allowWhileTyping(): KeyboardShortcutComponentCustomElement['allowWhileTyping'] {
		return this.elementRef.nativeElement.allowWhileTyping;
	}

	/** Gets/sets whether to prevent default on keyboard events */
	@Input()
	public set preventDefault(value: KeyboardShortcutComponentCustomElement['preventDefault'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.preventDefault = value != null && `${value}` !== 'false';
		});
	}

	public get preventDefault(): KeyboardShortcutComponentCustomElement['preventDefault'] {
		return this.elementRef.nativeElement.preventDefault;
	}

	/** Gets/sets whether to use capturing on keyboard events */
	@Input()
	public set capture(value: KeyboardShortcutComponentCustomElement['capture'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.capture = value != null && `${value}` !== 'false';
		});
	}

	public get capture(): KeyboardShortcutComponentCustomElement['capture'] {
		return this.elementRef.nativeElement.capture;
	}

	/** Gets/sets whether to match codes instead of keys on keyboard events */
	@Input()
	public set useCode(value: KeyboardShortcutComponentCustomElement['useCode'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.useCode = value != null && `${value}` !== 'false';
		});
	}

	public get useCode(): KeyboardShortcutComponentCustomElement['useCode'] {
		return this.elementRef.nativeElement.useCode;
	}

	/** Gets/sets whether the callback will be called. */
	@Input()
	public set disabled(value: KeyboardShortcutComponentCustomElement['disabled'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';
		});
	}

	public get disabled(): KeyboardShortcutComponentCustomElement['disabled'] {
		return this.elementRef.nativeElement.disabled;
	}

	/** Gets/sets whether the activation callback. */
	@Input()
	public set activateCallback(value: KeyboardShortcutComponentCustomElement['activateCallback']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.activateCallback = value;
		});
	}

	public get activateCallback(): KeyboardShortcutComponentCustomElement['activateCallback'] {
		return this.elementRef.nativeElement.activateCallback;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<KeyboardShortcutComponentCustomElement>,
		protected zone: NgZone
	) {
		defineKeyboardShortcutComponent();
		changeDetectorRef.detach();
	}
}
