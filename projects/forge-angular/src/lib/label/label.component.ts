// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { LabelComponent as LabelComponentCustomElement, defineLabelComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-label',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class LabelComponent {

	/** The forge-label element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The id of the associated element. */
	@Input()
	public set for(value: LabelComponentCustomElement['for']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.for = value;
		});
	}
	public get for(): LabelComponentCustomElement['for'] {
		return this.nativeElement.for;
	}

	/** The associated element. */
	@Input()
	public set forElement(value: LabelComponentCustomElement['forElement']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.forElement = value;
		});
	}
	public get forElement(): LabelComponentCustomElement['forElement'] {
		return this.nativeElement.forElement;
	}

	/** The element that a click should be simulated on. If not defined clicks act on the associated element. */
	@Input()
	public set clickTarget(value: LabelComponentCustomElement['clickTarget']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.clickTarget = value;
		});
	}
	public get clickTarget(): LabelComponentCustomElement['clickTarget'] {
		return this.nativeElement.clickTarget;
	}

	/** Propagates changes in the label's text content to the associated element. */
	@Input({ transform: booleanAttribute })
	public set dynamic(value: LabelComponentCustomElement['dynamic']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dynamic = value;
		});
	}
	public get dynamic(): LabelComponentCustomElement['dynamic'] {
		return this.nativeElement.dynamic;
	}

	/** Removes click handling from the label. */
	@Input({ transform: booleanAttribute })
	public set nonInteractive(value: LabelComponentCustomElement['nonInteractive']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.nonInteractive = value;
		});
	}
	public get nonInteractive(): LabelComponentCustomElement['nonInteractive'] {
		return this.nativeElement.nonInteractive;
	}

	/** Whether or not the label should be associated with an ancestor element. */
	@Input({ transform: booleanAttribute })
	public set legend(value: LabelComponentCustomElement['legend']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.legend = value;
		});
	}
	public get legend(): LabelComponentCustomElement['legend'] {
		return this.nativeElement.legend;
	}

	/** Updates the targetted element with the label's current text content. */
	public update(...args: Parameters<LabelComponentCustomElement['update']>): ReturnType<LabelComponentCustomElement['update']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.update(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<LabelComponentCustomElement>,
		protected zone: NgZone
	) {
		defineLabelComponent();
		changeDetectorRef.detach();
	}
}
