// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { ListItemComponent as ListItemComponentCustomElement, defineListItemComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-list-item',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ListItemComponent {

	/** The forge-list-item element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The href of the anchor. This forces the list item to render as an anchor element. */
	@Input()
	public set href(value: ListItemComponentCustomElement['href']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.href = value;
		});
	}
	public get href(): ListItemComponentCustomElement['href'] {
		return this.nativeElement.href;
	}

	/** The target of the list item when an `href` is set. Defaults to `'_blank'`. */
	@Input()
	public set target(value: ListItemComponentCustomElement['target']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.target = value;
		});
	}
	public get target(): ListItemComponentCustomElement['target'] {
		return this.nativeElement.target;
	}

	/** The anchor download attribute. */
	@Input({ transform: booleanAttribute })
	public set download(value: ListItemComponentCustomElement['download']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.download = value;
		});
	}
	public get download(): ListItemComponentCustomElement['download'] {
		return this.nativeElement.download;
	}

	/** The anchor rel attribute. */
	@Input({ transform: booleanAttribute })
	public set rel(value: ListItemComponentCustomElement['rel']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.rel = value;
		});
	}
	public get rel(): ListItemComponentCustomElement['rel'] {
		return this.nativeElement.rel;
	}

	/** If true, the list item will not be interactive. Deprecated use `nonInteractive` instead. */
	@Input({ transform: booleanAttribute })
	public set static(value: ListItemComponentCustomElement['static']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.static = value;
		});
	}
	public get static(): ListItemComponentCustomElement['static'] {
		return this.nativeElement.static;
	}

	/** If true, the list item will not be interactive. */
	@Input({ transform: booleanAttribute })
	public set nonInteractive(value: ListItemComponentCustomElement['nonInteractive']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.nonInteractive = value;
		});
	}
	public get nonInteractive(): ListItemComponentCustomElement['nonInteractive'] {
		return this.nativeElement.nonInteractive;
	}

	/** Disables the list item. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: ListItemComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): ListItemComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** Applies the selected state to the list item. */
	@Input({ transform: booleanAttribute })
	public set selected(value: ListItemComponentCustomElement['selected']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.selected = value;
		});
	}
	public get selected(): ListItemComponentCustomElement['selected'] {
		return this.nativeElement.selected;
	}

	/** Applies the active state to the list item by emulating its focused state. */
	@Input({ transform: booleanAttribute })
	public set active(value: ListItemComponentCustomElement['active']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.active = value;
		});
	}
	public get active(): ListItemComponentCustomElement['active'] {
		return this.nativeElement.active;
	}

	/** The unique value of the list item. */
	@Input()
	public set value(value: ListItemComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): ListItemComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** Applies the dense state to the list item. */
	@Input({ transform: booleanAttribute })
	public set dense(value: ListItemComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): ListItemComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** If true, the list item will not propagate click events to itself and therefore cannot receive focus. */
	@Input({ transform: booleanAttribute })
	public set propagateClick(value: ListItemComponentCustomElement['propagateClick']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.propagateClick = value;
		});
	}
	public get propagateClick(): ListItemComponentCustomElement['propagateClick'] {
		return this.nativeElement.propagateClick;
	}

	/** Applies the indented state by adding margin to the start of the list item. */
	@Input({ transform: booleanAttribute })
	public set indented(value: ListItemComponentCustomElement['indented']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.indented = value;
		});
	}
	public get indented(): ListItemComponentCustomElement['indented'] {
		return this.nativeElement.indented;
	}

	/** Sets the list item height to support at least two lines of text. */
	@Input({ transform: booleanAttribute })
	public set twoLine(value: ListItemComponentCustomElement['twoLine']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.twoLine = value;
		});
	}
	public get twoLine(): ListItemComponentCustomElement['twoLine'] {
		return this.nativeElement.twoLine;
	}

	/** Sets the list item height to support at least three lines of text. */
	@Input({ transform: booleanAttribute })
	public set threeLine(value: ListItemComponentCustomElement['threeLine']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.threeLine = value;
		});
	}
	public get threeLine(): ListItemComponentCustomElement['threeLine'] {
		return this.nativeElement.threeLine;
	}

	/** Sets the list item to wrap its text content. */
	@Input({ transform: booleanAttribute })
	public set wrap(value: ListItemComponentCustomElement['wrap']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.wrap = value;
		});
	}
	public get wrap(): ListItemComponentCustomElement['wrap'] {
		return this.nativeElement.wrap;
	}


	public focus(...args: Parameters<ListItemComponentCustomElement['focus']>): ReturnType<ListItemComponentCustomElement['focus']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
	}


	public click(...args: Parameters<ListItemComponentCustomElement['click']>): ReturnType<ListItemComponentCustomElement['click']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.click(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ListItemComponentCustomElement>,
		protected zone: NgZone
	) {
		defineListItemComponent();
		changeDetectorRef.detach();
	}
}
