// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { ListItemComponent as ListItemComponentCustomElement, defineListItemComponent } from '@tylertech/forge';

/** The custom element class behind the `<forge-list-item>` element. */
@Component({
  selector: 'forge-list-item',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ListItemComponent {

	/** Gets/sets whether the static state of this list item. */
	@Input()
	public set static(value: ListItemComponentCustomElement['static'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.static = value != null && `${value}` !== 'false';
		});
	}

	public get static(): ListItemComponentCustomElement['static'] {
		return this.elementRef.nativeElement.static;
	}

	/** Gets/sets whether the list item displays two lines of text. */
	@Input()
	public set twoLine(value: ListItemComponentCustomElement['twoLine'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.twoLine = value != null && `${value}` !== 'false';
		});
	}

	public get twoLine(): ListItemComponentCustomElement['twoLine'] {
		return this.elementRef.nativeElement.twoLine;
	}

	/** Gets/sets whether the list item displays three lines of text. */
	@Input()
	public set threeLine(value: ListItemComponentCustomElement['threeLine'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.threeLine = value != null && `${value}` !== 'false';
		});
	}

	public get threeLine(): ListItemComponentCustomElement['threeLine'] {
		return this.elementRef.nativeElement.threeLine;
	}

	/** Gets/sets whether the list item is active or not. */
	@Input()
	public set active(value: ListItemComponentCustomElement['active'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.active = value != null && `${value}` !== 'false';
		});
	}

	public get active(): ListItemComponentCustomElement['active'] {
		return this.elementRef.nativeElement.active;
	}

	/** Gets/sets whether the list item is selected or not. */
	@Input()
	public set selected(value: ListItemComponentCustomElement['selected'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.selected = value != null && `${value}` !== 'false';
		});
	}

	public get selected(): ListItemComponentCustomElement['selected'] {
		return this.elementRef.nativeElement.selected;
	}

	/** Gets/sets list item value. */
	@Input()
	public set value(value: ListItemComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.value = value;
		});
	}

	public get value(): ListItemComponentCustomElement['value'] {
		return this.elementRef.nativeElement.value;
	}

	/** Gets/sets the href link that this list item will send the browser to when clicked. */
	@Input()
	public set href(value: ListItemComponentCustomElement['href']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.href = value;
		});
	}

	public get href(): ListItemComponentCustomElement['href'] {
		return this.elementRef.nativeElement.href;
	}

	/** Gets/sets the href link target. Only pertains when `href` is also used. */
	@Input()
	public set target(value: ListItemComponentCustomElement['target']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.target = value;
		});
	}

	public get target(): ListItemComponentCustomElement['target'] {
		return this.elementRef.nativeElement.target;
	}

	/** Gets/sets whether the list item has a ripple or not. */
	@Input()
	public set ripple(value: ListItemComponentCustomElement['ripple'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.ripple = value != null && `${value}` !== 'false';
		});
	}

	public get ripple(): ListItemComponentCustomElement['ripple'] {
		return this.elementRef.nativeElement.ripple;
	}

	/** Gets/sets whether the list item is disabled or not. */
	@Input()
	public set disabled(value: ListItemComponentCustomElement['disabled'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';
		});
	}

	public get disabled(): ListItemComponentCustomElement['disabled'] {
		return this.elementRef.nativeElement.disabled;
	}

	/** Gets/sets whether the list item is using dense styles or not. */
	@Input()
	public set dense(value: ListItemComponentCustomElement['dense'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';
		});
	}

	public get dense(): ListItemComponentCustomElement['dense'] {
		return this.elementRef.nativeElement.dense;
	}

	/** Gets/sets whether the list item allows mousedown events through to the underlying list item element. Default is true. */
	@Input()
	public set propagateClick(value: ListItemComponentCustomElement['propagateClick'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.propagateClick = value != null && `${value}` !== 'false';
		});
	}

	public get propagateClick(): ListItemComponentCustomElement['propagateClick'] {
		return this.elementRef.nativeElement.propagateClick;
	}

	/** Gets/sets whether the list item is indented or not. Default is false. */
	@Input()
	public set indented(value: ListItemComponentCustomElement['indented'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.indented = value != null && `${value}` !== 'false';
		});
	}

	public get indented(): ListItemComponentCustomElement['indented'] {
		return this.elementRef.nativeElement.indented;
	}

	/** Gets/sets whether the list item content is wrapped or not. Default is true. */
	@Input()
	public set wrap(value: ListItemComponentCustomElement['wrap'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.wrap = value != null && `${value}` !== 'false';
		});
	}

	public get wrap(): ListItemComponentCustomElement['wrap'] {
		return this.elementRef.nativeElement.wrap;
	}

	/** Sets focus to this list item. */
	public focus(...args: Parameters<ListItemComponentCustomElement['focus']>): ReturnType<ListItemComponentCustomElement['focus']> {
		return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.focus(...args));
	}


	public deactivateRipple(...args: Parameters<ListItemComponentCustomElement['deactivateRipple']>): ReturnType<ListItemComponentCustomElement['deactivateRipple']> {
		return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.deactivateRipple(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ListItemComponentCustomElement>,
		protected zone: NgZone
	) {
		defineListItemComponent();
		changeDetectorRef.detach();
	}
}
