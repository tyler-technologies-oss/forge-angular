// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { ListComponent as ListComponentCustomElement, defineListComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-list',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ListComponent {

	/** The forge-list element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Whether the list has all dense items or not. */
	@Input({ transform: booleanAttribute })
	public set dense(value: ListComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): ListComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** Whether the list items within this list are indented. Default is false. */
	@Input({ transform: booleanAttribute })
	public set indented(value: ListComponentCustomElement['indented']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.indented = value;
		});
	}
	public get indented(): ListComponentCustomElement['indented'] {
		return this.nativeElement.indented;
	}

	/** The selected list item value(s). */
	@Input()
	public set selectedValue(value: ListComponentCustomElement['selectedValue']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.selectedValue = value;
		});
	}
	public get selectedValue(): ListComponentCustomElement['selectedValue'] {
		return this.nativeElement.selectedValue;
	}

	/** Whether the list has all two-line items or not. */
	@Input({ transform: booleanAttribute })
	public set twoLine(value: ListComponentCustomElement['twoLine']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.twoLine = value;
		});
	}
	public get twoLine(): ListComponentCustomElement['twoLine'] {
		return this.nativeElement.twoLine;
	}

	/** Whether the list has all three-line items or not. */
	@Input({ transform: booleanAttribute })
	public set threeLine(value: ListComponentCustomElement['threeLine']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.threeLine = value;
		});
	}
	public get threeLine(): ListComponentCustomElement['threeLine'] {
		return this.nativeElement.threeLine;
	}

	/** Whether the list has all items that wrap their text or not. */
	@Input({ transform: booleanAttribute })
	public set wrap(value: ListComponentCustomElement['wrap']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.wrap = value;
		});
	}
	public get wrap(): ListComponentCustomElement['wrap'] {
		return this.nativeElement.wrap;
	}

	/** Controls whether the list items will automatically attach themselves to interactive slotted elements or not. */
	@Input({ transform: booleanAttribute })
	public set noninteractive(value: ListComponentCustomElement['noninteractive']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.noninteractive = value;
		});
	}
	public get noninteractive(): ListComponentCustomElement['noninteractive'] {
		return this.nativeElement.noninteractive;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ListComponentCustomElement>,
		protected zone: NgZone
	) {
		defineListComponent();
		changeDetectorRef.detach();
	}
}
