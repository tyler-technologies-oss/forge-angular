// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { MenuComponent as MenuComponentCustomElement, defineMenuComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-menu>` custom element. */
@Component({
  selector: 'forge-menu',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class MenuComponent {

	/** The forge-menu element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Gets/sets the open state. */
	@Input({ transform: booleanAttribute })
	public set open(value: MenuComponentCustomElement['open']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.open = value;
		});
	}
	public get open(): MenuComponentCustomElement['open'] {
		return this.nativeElement.open;
	}

	/** Gets/sets the array of options to display in the menu. */
	@Input()
	public set options(value: MenuComponentCustomElement['options']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.options = value;
		});
	}
	public get options(): MenuComponentCustomElement['options'] {
		return this.nativeElement.options;
	}

	/** Gets/sets the selected option to the index. Does not support cascading menus. */
	@Input({ transform: numberAttribute })
	public set selectedIndex(value: MenuComponentCustomElement['selectedIndex']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.selectedIndex = value;
		});
	}
	public get selectedIndex(): MenuComponentCustomElement['selectedIndex'] {
		return this.nativeElement.selectedIndex;
	}

	/** Gets/sets the value of the option to select. */
	@Input()
	public set selectedValue(value: MenuComponentCustomElement['selectedValue']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.selectedValue = value;
		});
	}
	public get selectedValue(): MenuComponentCustomElement['selectedValue'] {
		return this.nativeElement.selectedValue;
	}

	/** Gets/sets the menu placement (default is bottom-left). */
	@Input()
	public set placement(value: MenuComponentCustomElement['placement']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.placement = value;
		});
	}
	public get placement(): MenuComponentCustomElement['placement'] {
		return this.nativeElement.placement;
	}

	/** Gets/sets the fallback menu placement for overriding the default of any side. */
	@Input()
	public set fallbackPlacements(value: MenuComponentCustomElement['fallbackPlacements']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.fallbackPlacements = value;
		});
	}
	public get fallbackPlacements(): MenuComponentCustomElement['fallbackPlacements'] {
		return this.nativeElement.fallbackPlacements;
	}

	/** Gets/sets dense state of the list options used in the menu popup. */
	@Input({ transform: booleanAttribute })
	public set dense(value: MenuComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): MenuComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** Gets/sets the class name to use for option icons. */
	@Input()
	public set iconClass(value: MenuComponentCustomElement['iconClass']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.iconClass = value;
		});
	}
	public get iconClass(): MenuComponentCustomElement['iconClass'] {
		return this.nativeElement.iconClass;
	}

	/** Gets/sets whether selection of menu items is persisted. */
	@Input({ transform: booleanAttribute })
	public set persistSelection(value: MenuComponentCustomElement['persistSelection']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.persistSelection = value;
		});
	}
	public get persistSelection(): MenuComponentCustomElement['persistSelection'] {
		return this.nativeElement.persistSelection;
	}

	/** Gets/sets the mode that this menu is using. */
	@Input()
	public set mode(value: MenuComponentCustomElement['mode']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.mode = value;
		});
	}
	public get mode(): MenuComponentCustomElement['mode'] {
		return this.nativeElement.mode;
	}

	/** Sets the position adjustment on the internal popup element. */
	@Input()
	public set popupOffset(value: MenuComponentCustomElement['popupOffset']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupOffset = value;
		});
	}
	public get popupOffset(): MenuComponentCustomElement['popupOffset'] {
		return this.nativeElement.popupOffset;
	}

	/** Sets the callback that will be executed for each option in the dropdown for producing custom option templates. */
	@Input()
	public set optionBuilder(value: MenuComponentCustomElement['optionBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.optionBuilder = value;
		});
	}
	public get optionBuilder(): MenuComponentCustomElement['optionBuilder'] {
		return this.nativeElement.optionBuilder;
	}

	/** Gets the currently active popup element when the dropdown is open. */
	public get popupElement(): MenuComponentCustomElement['popupElement'] {
		return this.nativeElement.popupElement;
	}

	/** Gets/sets the list of classes to apply to the popup element. */
	@Input()
	public set popupClasses(value: MenuComponentCustomElement['popupClasses']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupClasses = value;
		});
	}
	public get popupClasses(): MenuComponentCustomElement['popupClasses'] {
		return this.nativeElement.popupClasses;
	}

	/** Gets/sets the callback function for generating header content within the popup. */
	@Input()
	public set popupHeaderBuilder(value: MenuComponentCustomElement['popupHeaderBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupHeaderBuilder = value;
		});
	}
	public get popupHeaderBuilder(): MenuComponentCustomElement['popupHeaderBuilder'] {
		return this.nativeElement.popupHeaderBuilder;
	}

	/** Gets/sets the callback function for generating header content within the popup. */
	@Input()
	public set popupFooterBuilder(value: MenuComponentCustomElement['popupFooterBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupFooterBuilder = value;
		});
	}
	public get popupFooterBuilder(): MenuComponentCustomElement['popupFooterBuilder'] {
		return this.nativeElement.popupFooterBuilder;
	}

	/** Gets/sets whether the popup width is synchronized with the popup target width. */
	@Input({ transform: booleanAttribute })
	public set syncPopupWidth(value: MenuComponentCustomElement['syncPopupWidth']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.syncPopupWidth = value;
		});
	}
	public get syncPopupWidth(): MenuComponentCustomElement['syncPopupWidth'] {
		return this.nativeElement.syncPopupWidth;
	}

	/** Gets/sets the maximum number of options to display in the dropdown. */
	@Input({ transform: numberAttribute })
	public set optionLimit(value: MenuComponentCustomElement['optionLimit']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.optionLimit = value;
		});
	}
	public get optionLimit(): MenuComponentCustomElement['optionLimit'] {
		return this.nativeElement.optionLimit;
	}

	/** Controls the observation of scroll events on the dropdown. */
	@Input({ transform: booleanAttribute })
	public set observeScroll(value: MenuComponentCustomElement['observeScroll']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.observeScroll = value;
		});
	}
	public get observeScroll(): MenuComponentCustomElement['observeScroll'] {
		return this.nativeElement.observeScroll;
	}

	/** The number of pixels from the bottom to trigger the scroll bottom event. Only applicable if `observeScroll` is true. */
	@Input({ transform: numberAttribute })
	public set observeScrollThreshold(value: MenuComponentCustomElement['observeScrollThreshold']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.observeScrollThreshold = value;
		});
	}
	public get observeScrollThreshold(): MenuComponentCustomElement['observeScrollThreshold'] {
		return this.nativeElement.observeScrollThreshold;
	}

	/** Gets/sets whether the popup width will be constrained to a max width of the viewport width (default: `100vw`). */
	@Input({ transform: booleanAttribute })
	public set constrainPopupWidth(value: MenuComponentCustomElement['constrainPopupWidth']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.constrainPopupWidth = value;
		});
	}
	public get constrainPopupWidth(): MenuComponentCustomElement['constrainPopupWidth'] {
		return this.nativeElement.constrainPopupWidth;
	}

	/**
	 * Gets/sets whether the options will wrap their text or not.
	 * This only applies if `constrainPopupWidth` is `true`, if there is an explicit width set via CSS.
	 */
	@Input({ transform: booleanAttribute })
	public set wrapOptionText(value: MenuComponentCustomElement['wrapOptionText']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.wrapOptionText = value;
		});
	}
	public get wrapOptionText(): MenuComponentCustomElement['wrapOptionText'] {
		return this.nativeElement.wrapOptionText;
	}

	/** Force propagates the key event from another element this component. */
	public propagateKeyEvent(...args: Parameters<MenuComponentCustomElement['propagateKeyEvent']>): ReturnType<MenuComponentCustomElement['propagateKeyEvent']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.propagateKeyEvent(...args));
	}


	public activateFirstOption(...args: Parameters<MenuComponentCustomElement['activateFirstOption']>): ReturnType<MenuComponentCustomElement['activateFirstOption']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.activateFirstOption(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<MenuComponentCustomElement>,
		protected zone: NgZone
	) {
		defineMenuComponent();
		changeDetectorRef.detach();
	}
}
