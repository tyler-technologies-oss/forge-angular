// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { MeterComponent as MeterComponentCustomElement, defineMeterComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-meter',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class MeterComponent {

	/** The forge-meter element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The current value of the meter. */
	@Input({ transform: numberAttribute })
	public set value(value: MeterComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): MeterComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** The minimum value of the meter. */
	@Input({ transform: numberAttribute })
	public set min(value: MeterComponentCustomElement['min']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.min = value;
		});
	}
	public get min(): MeterComponentCustomElement['min'] {
		return this.nativeElement.min;
	}

	/** The maximum value of the meter. */
	@Input({ transform: numberAttribute })
	public set max(value: MeterComponentCustomElement['max']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.max = value;
		});
	}
	public get max(): MeterComponentCustomElement['max'] {
		return this.nativeElement.max;
	}

	/** The low value threshold. */
	@Input()
	public set low(value: MeterComponentCustomElement['low']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.low = value;
		});
	}
	public get low(): MeterComponentCustomElement['low'] {
		return this.nativeElement.low;
	}

	/** The high value threshold. */
	@Input()
	public set high(value: MeterComponentCustomElement['high']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.high = value;
		});
	}
	public get high(): MeterComponentCustomElement['high'] {
		return this.nativeElement.high;
	}

	/** Indicates the region of the optimum value. */
	@Input()
	public set optimum(value: MeterComponentCustomElement['optimum']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.optimum = value;
		});
	}
	public get optimum(): MeterComponentCustomElement['optimum'] {
		return this.nativeElement.optimum;
	}

	/** Whether to display tickmarks. */
	@Input({ transform: booleanAttribute })
	public set tickmarks(value: MeterComponentCustomElement['tickmarks']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.tickmarks = value;
		});
	}
	public get tickmarks(): MeterComponentCustomElement['tickmarks'] {
		return this.nativeElement.tickmarks;
	}

	/**
	 * Whether the current value is displayed as a percentage or raw value. When set to `'manual'`
	 * the value text is not shown automatically but can still be set manually via the value slot.
	 */
	@Input()
	public set valueMode(value: MeterComponentCustomElement['valueMode']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.valueMode = value;
		});
	}
	public get valueMode(): MeterComponentCustomElement['valueMode'] {
		return this.nativeElement.valueMode;
	}

	/** Whether the meter is oriented horizontally or vertically. */
	@Input()
	public set direction(value: MeterComponentCustomElement['direction']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.direction = value;
		});
	}
	public get direction(): MeterComponentCustomElement['direction'] {
		return this.nativeElement.direction;
	}

	/** The shape of the meter. */
	@Input()
	public set shape(value: MeterComponentCustomElement['shape']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.shape = value;
		});
	}
	public get shape(): MeterComponentCustomElement['shape'] {
		return this.nativeElement.shape;
	}

	/** The shape of the bar. */
	@Input()
	public set innerShape(value: MeterComponentCustomElement['innerShape']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.innerShape = value;
		});
	}
	public get innerShape(): MeterComponentCustomElement['innerShape'] {
		return this.nativeElement.innerShape;
	}

	/** The density of the meter. */
	@Input()
	public set density(value: MeterComponentCustomElement['density']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.density = value;
		});
	}
	public get density(): MeterComponentCustomElement['density'] {
		return this.nativeElement.density;
	}

	/** The theme of the meter. */
	@Input()
	public set theme(value: MeterComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): MeterComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}

	/** Whether the theme is muted. */
	@Input({ transform: booleanAttribute })
	public set muted(value: MeterComponentCustomElement['muted']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.muted = value;
		});
	}
	public get muted(): MeterComponentCustomElement['muted'] {
		return this.nativeElement.muted;
	}

	/** Gets the percentage of the meter that's filled. */
	public get percentage(): MeterComponentCustomElement['percentage'] {
		return this.nativeElement.percentage;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<MeterComponentCustomElement>,
		protected zone: NgZone
	) {
		defineMeterComponent();
		changeDetectorRef.detach();
	}
}
