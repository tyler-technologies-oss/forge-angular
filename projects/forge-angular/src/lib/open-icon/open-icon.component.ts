// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input, inject } from '@angular/core';
import { OpenIconComponent as OpenIconComponentCustomElement, defineOpenIconComponent } from '@tylertech/forge';

/**  */
@Component({
    selector: 'forge-open-icon',
    changeDetection: ChangeDetectionStrategy.OnPush,
    template: '<ng-content></ng-content>',
    standalone: false
})
export class OpenIconComponent {
	protected elementRef = inject<ElementRef<OpenIconComponentCustomElement>>(ElementRef);
	protected zone = inject(NgZone);


	/** The forge-open-icon element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Whether the icon is open or closed. */
	@Input({ transform: booleanAttribute })
	public set open(value: OpenIconComponentCustomElement['open']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.open = value;
		});
	}
	public get open(): OpenIconComponentCustomElement['open'] {
		return this.nativeElement.open;
	}

	/** The orientation of the rotation. */
	@Input()
	public set orientation(value: OpenIconComponentCustomElement['orientation']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.orientation = value;
		});
	}
	public get orientation(): OpenIconComponentCustomElement['orientation'] {
		return this.nativeElement.orientation;
	}

	/** The rotation amount. */
	@Input()
	public set rotation(value: OpenIconComponentCustomElement['rotation']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.rotation = value;
		});
	}
	public get rotation(): OpenIconComponentCustomElement['rotation'] {
		return this.nativeElement.rotation;
	}

	constructor() {
		const changeDetectorRef = inject(ChangeDetectorRef);

		defineOpenIconComponent();
		changeDetectorRef.detach();
	}
}
