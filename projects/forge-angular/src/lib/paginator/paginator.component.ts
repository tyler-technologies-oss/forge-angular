// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { PaginatorComponent as PaginatorComponentCustomElement, definePaginatorComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-paginator',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class PaginatorComponent {

	/** The zero-based page index. Default is 0. */
	@Input()
	public set pageIndex(value: PaginatorComponentCustomElement['pageIndex'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.pageIndex = +value;
		});
	}

	public get pageIndex(): PaginatorComponentCustomElement['pageIndex'] {
		return this.elementRef.nativeElement.pageIndex;
	}

	/** Number of items to display on a page. By default set to 25. */
	@Input()
	public set pageSize(value: PaginatorComponentCustomElement['pageSize'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.pageSize = +value;
		});
	}

	public get pageSize(): PaginatorComponentCustomElement['pageSize'] {
		return this.elementRef.nativeElement.pageSize;
	}

	/** Sets page index by providing the number of items to skip. The getter for this property returns the number of items to skip. */
	@Input()
	public set offset(value: PaginatorComponentCustomElement['offset'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.offset = +value;
		});
	}

	public get offset(): PaginatorComponentCustomElement['offset'] {
		return this.elementRef.nativeElement.offset;
	}

	/** The total number of items to be paginated. Default is 0. */
	@Input()
	public set total(value: PaginatorComponentCustomElement['total'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.total = +value;
		});
	}

	public get total(): PaginatorComponentCustomElement['total'] {
		return this.elementRef.nativeElement.total;
	}

	/** The set of provided page size options to display to the user. */
	@Input()
	public set pageSizeOptions(value: PaginatorComponentCustomElement['pageSizeOptions']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.pageSizeOptions = value;
		});
	}

	public get pageSizeOptions(): PaginatorComponentCustomElement['pageSizeOptions'] {
		return this.elementRef.nativeElement.pageSizeOptions;
	}

	/** A label for the paginator. Default is "Rows per page:". */
	@Input()
	public set label(value: PaginatorComponentCustomElement['label']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.label = value;
		});
	}

	public get label(): PaginatorComponentCustomElement['label'] {
		return this.elementRef.nativeElement.label;
	}

	/** Whether to show the first page and last page buttons. Default is false. */
	@Input()
	public set firstLast(value: PaginatorComponentCustomElement['firstLast'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.firstLast = value != null && `${value}` !== 'false';
		});
	}

	public get firstLast(): PaginatorComponentCustomElement['firstLast'] {
		return this.elementRef.nativeElement.firstLast;
	}

	/** Whether to show the first page button. Default is false. */
	@Input()
	public set first(value: PaginatorComponentCustomElement['first'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.first = value != null && `${value}` !== 'false';
		});
	}

	public get first(): PaginatorComponentCustomElement['first'] {
		return this.elementRef.nativeElement.first;
	}

	/** Whether the paginator is disabled. Default is false. */
	@Input()
	public set disabled(value: PaginatorComponentCustomElement['disabled'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';
		});
	}

	public get disabled(): PaginatorComponentCustomElement['disabled'] {
		return this.elementRef.nativeElement.disabled;
	}


	@Input()
	public set alternative(value: PaginatorComponentCustomElement['alternative'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.alternative = value != null && `${value}` !== 'false';
		});
	}

	public get alternative(): PaginatorComponentCustomElement['alternative'] {
		return this.elementRef.nativeElement.alternative;
	}


	@Input()
	public set alignment(value: PaginatorComponentCustomElement['alignment']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.alignment = value;
		});
	}

	public get alignment(): PaginatorComponentCustomElement['alignment'] {
		return this.elementRef.nativeElement.alignment;
	}


	@Input()
	public set rangeLabelCallback(value: PaginatorComponentCustomElement['rangeLabelCallback']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.rangeLabelCallback = value;
		});
	}

	public get rangeLabelCallback(): PaginatorComponentCustomElement['rangeLabelCallback'] {
		return this.elementRef.nativeElement.rangeLabelCallback;
	}


	public focus(...args: Parameters<PaginatorComponentCustomElement['focus']>): ReturnType<PaginatorComponentCustomElement['focus']> {
		return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.focus(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<PaginatorComponentCustomElement>,
		protected zone: NgZone
	) {
		definePaginatorComponent();
		changeDetectorRef.detach();
	}
}
