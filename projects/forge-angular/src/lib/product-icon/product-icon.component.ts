// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { ProductIconComponent as ProductIconComponentCustomElement, defineProductIconComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-product-icon>` custom element. */
@Component({
  selector: 'forge-product-icon',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ProductIconComponent {

	/** The color of the container element from the material color palette. */
	@Input()
	public set color(value: ProductIconComponentCustomElement['color']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.color = value;
		});
	}

	public get color(): ProductIconComponentCustomElement['color'] {
		return this.elementRef.nativeElement.color;
	}

	/** Controls the height and width of the container element. */
	@Input()
	public set size(value: ProductIconComponentCustomElement['size'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.size = +value;
		});
	}

	public get size(): ProductIconComponentCustomElement['size'] {
		return this.elementRef.nativeElement.size;
	}

	/** Controls the visibility of the text shadow. */
	@Input()
	public set shadow(value: ProductIconComponentCustomElement['shadow'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.shadow = value != null && `${value}` !== 'false';
		});
	}

	public get shadow(): ProductIconComponentCustomElement['shadow'] {
		return this.elementRef.nativeElement.shadow;
	}

	/** The number of iterations to apply the text shadow. */
	@Input()
	public set iterations(value: ProductIconComponentCustomElement['iterations'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.iterations = +value;
		});
	}

	public get iterations(): ProductIconComponentCustomElement['iterations'] {
		return this.elementRef.nativeElement.iterations;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ProductIconComponentCustomElement>,
		protected zone: NgZone
	) {
		defineProductIconComponent();
		changeDetectorRef.detach();
	}
}
