// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { QuantityFieldComponent as QuantityFieldComponentCustomElement, defineQuantityFieldComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-quantity-field>` custom element. */
@Component({
  selector: 'forge-quantity-field',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class QuantityFieldComponent {

	/** Gets/sets the invalid state. */
	@Input()
	public set invalid(value: QuantityFieldComponentCustomElement['invalid'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.invalid = value != null && `${value}` !== 'false';
		});
	}

	public get invalid(): QuantityFieldComponentCustomElement['invalid'] {
		return this.elementRef.nativeElement.invalid;
	}

	/** Gets/sets the required state which controls the visibility of the asterisk in the label. */
	@Input()
	public set required(value: QuantityFieldComponentCustomElement['required'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.required = value != null && `${value}` !== 'false';
		});
	}

	public get required(): QuantityFieldComponentCustomElement['required'] {
		return this.elementRef.nativeElement.required;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<QuantityFieldComponentCustomElement>,
		protected zone: NgZone
	) {
		defineQuantityFieldComponent();
		changeDetectorRef.detach();
	}
}
