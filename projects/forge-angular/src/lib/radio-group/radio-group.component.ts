// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { RadioGroupComponent as RadioGroupComponentCustomElement, defineRadioGroupComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-radio-group',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class RadioGroupComponent {

	/** The forge-radio-group element. */
	public readonly nativeElement = this.elementRef.nativeElement;


	public get form(): RadioGroupComponentCustomElement['form'] {
		return this.nativeElement.form;
	}


	public get labels(): RadioGroupComponentCustomElement['labels'] {
		return this.nativeElement.labels;
	}


	@Input()
	public set name(value: RadioGroupComponentCustomElement['name']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.name = value;
		});
	}
	public get name(): RadioGroupComponentCustomElement['name'] {
		return this.nativeElement.name;
	}

	/** Whether or not the radio group is disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: RadioGroupComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): RadioGroupComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<RadioGroupComponentCustomElement>,
		protected zone: NgZone
	) {
		defineRadioGroupComponent();
		changeDetectorRef.detach();
	}
}
