// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { RadioComponent as RadioComponentCustomElement, defineRadioComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-radio',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class RadioComponent {

	/** The forge-radio element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Indicates whether the radio button is checked. */
	@Input({ transform: booleanAttribute })
	public set checked(value: RadioComponentCustomElement['checked']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.checked = value;
		});
	}
	public get checked(): RadioComponentCustomElement['checked'] {
		return this.nativeElement.checked;
	}

	/** Indicates whether the radio button is checked by default. */
	@Input({ transform: booleanAttribute })
	public set defaultChecked(value: RadioComponentCustomElement['defaultChecked']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.defaultChecked = value;
		});
	}
	public get defaultChecked(): RadioComponentCustomElement['defaultChecked'] {
		return this.nativeElement.defaultChecked;
	}

	/** The value of the radio button when submitted. */
	@Input()
	public set value(value: RadioComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): RadioComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** Indicates whether the radio button should be displayed in a dense layout. */
	@Input({ transform: booleanAttribute })
	public set dense(value: RadioComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): RadioComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** Indicates whether the radio button is disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: RadioComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): RadioComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** Indicates whether the radio button is required. */
	@Input({ transform: booleanAttribute })
	public set required(value: RadioComponentCustomElement['required']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.required = value;
		});
	}
	public get required(): RadioComponentCustomElement['required'] {
		return this.nativeElement.required;
	}

	/** Indicates whether the radio button is read-only. */
	@Input({ transform: booleanAttribute })
	public set readonly(value: RadioComponentCustomElement['readonly']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.readonly = value;
		});
	}
	public get readonly(): RadioComponentCustomElement['readonly'] {
		return this.nativeElement.readonly;
	}

	/** The position of the radio button's label. */
	@Input()
	public set labelPosition(value: RadioComponentCustomElement['labelPosition']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labelPosition = value;
		});
	}
	public get labelPosition(): RadioComponentCustomElement['labelPosition'] {
		return this.nativeElement.labelPosition;
	}


	public get form(): RadioComponentCustomElement['form'] {
		return this.nativeElement.form;
	}


	public get labels(): RadioComponentCustomElement['labels'] {
		return this.nativeElement.labels;
	}


	@Input()
	public set name(value: RadioComponentCustomElement['name']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.name = value;
		});
	}
	public get name(): RadioComponentCustomElement['name'] {
		return this.nativeElement.name;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<RadioComponentCustomElement>,
		protected zone: NgZone
	) {
		defineRadioComponent();
		changeDetectorRef.detach();
	}
}
