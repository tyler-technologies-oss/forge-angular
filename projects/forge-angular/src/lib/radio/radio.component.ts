// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { RadioComponent as RadioComponentCustomElement, defineRadioComponent } from '@tylertech/forge';

/** The custom element class behind the `<forge-radio>` element. */
@Component({
  selector: 'forge-radio',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class RadioComponent {

	/** Gets/sets whether the radio button is dense. */
	@Input()
	public set dense(value: RadioComponentCustomElement['dense'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';
		});
	}

	public get dense(): RadioComponentCustomElement['dense'] {
		return this.elementRef.nativeElement.dense;
	}


	public syncCheckedState(...args: Parameters<RadioComponentCustomElement['syncCheckedState']>): ReturnType<RadioComponentCustomElement['syncCheckedState']> {
		return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.syncCheckedState(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<RadioComponentCustomElement>,
		protected zone: NgZone
	) {
		defineRadioComponent();
		changeDetectorRef.detach();
	}
}
