// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input, inject } from '@angular/core';
import { ScaffoldComponent as ScaffoldComponentCustomElement, defineScaffoldComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-scaffold',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class ScaffoldComponent {
	protected elementRef = inject<ElementRef<ScaffoldComponentCustomElement>>(ElementRef);
	protected zone = inject(NgZone);

	/** The forge-scaffold element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Whether the scaffold should be full viewport height. */
	@Input({ transform: booleanAttribute })
	public set viewport(value: ScaffoldComponentCustomElement['viewport']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.viewport = value;
		});
	}
	public get viewport(): ScaffoldComponentCustomElement['viewport'] {
		return this.nativeElement.viewport;
	}

	constructor() {
		defineScaffoldComponent();
		const changeDetectorRef = inject(ChangeDetectorRef);
		changeDetectorRef.detach();
	}
}
