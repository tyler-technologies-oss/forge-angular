// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { SelectComponent as SelectComponentCustomElement, defineSelectComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-select',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class SelectComponent {

	/** The forge-select element. */
	public readonly nativeElement = this.elementRef.nativeElement;


	@Input()
	public set label(value: SelectComponentCustomElement['label']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.label = value;
		});
	}
	public get label(): SelectComponentCustomElement['label'] {
		return this.nativeElement.label;
	}


	@Input()
	public set placeholder(value: SelectComponentCustomElement['placeholder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.placeholder = value;
		});
	}
	public get placeholder(): SelectComponentCustomElement['placeholder'] {
		return this.nativeElement.placeholder;
	}


	@Input({ transform: booleanAttribute })
	public set floatLabel(value: SelectComponentCustomElement['floatLabel']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.floatLabel = value;
		});
	}
	public get floatLabel(): SelectComponentCustomElement['floatLabel'] {
		return this.nativeElement.floatLabel;
	}


	@Input()
	public set density(value: SelectComponentCustomElement['density']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.density = value;
		});
	}
	public get density(): SelectComponentCustomElement['density'] {
		return this.nativeElement.density;
	}


	@Input({ transform: booleanAttribute })
	public set dense(value: SelectComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): SelectComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}


	@Input({ transform: booleanAttribute })
	public set disabled(value: SelectComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): SelectComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}


	@Input()
	public set labelPosition(value: SelectComponentCustomElement['labelPosition']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labelPosition = value;
		});
	}
	public get labelPosition(): SelectComponentCustomElement['labelPosition'] {
		return this.nativeElement.labelPosition;
	}


	@Input()
	public set labelAlignment(value: SelectComponentCustomElement['labelAlignment']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labelAlignment = value;
		});
	}
	public get labelAlignment(): SelectComponentCustomElement['labelAlignment'] {
		return this.nativeElement.labelAlignment;
	}


	@Input({ transform: booleanAttribute })
	public set invalid(value: SelectComponentCustomElement['invalid']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.invalid = value;
		});
	}
	public get invalid(): SelectComponentCustomElement['invalid'] {
		return this.nativeElement.invalid;
	}


	@Input({ transform: booleanAttribute })
	public set required(value: SelectComponentCustomElement['required']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.required = value;
		});
	}
	public get required(): SelectComponentCustomElement['required'] {
		return this.nativeElement.required;
	}


	@Input({ transform: booleanAttribute })
	public set optional(value: SelectComponentCustomElement['optional']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.optional = value;
		});
	}
	public get optional(): SelectComponentCustomElement['optional'] {
		return this.nativeElement.optional;
	}


	@Input()
	public set variant(value: SelectComponentCustomElement['variant']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.variant = value;
		});
	}
	public get variant(): SelectComponentCustomElement['variant'] {
		return this.nativeElement.variant;
	}


	@Input()
	public set theme(value: SelectComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): SelectComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}


	@Input()
	public set shape(value: SelectComponentCustomElement['shape']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.shape = value;
		});
	}
	public get shape(): SelectComponentCustomElement['shape'] {
		return this.nativeElement.shape;
	}


	@Input({ transform: booleanAttribute })
	public set popoverIcon(value: SelectComponentCustomElement['popoverIcon']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverIcon = value;
		});
	}
	public get popoverIcon(): SelectComponentCustomElement['popoverIcon'] {
		return this.nativeElement.popoverIcon;
	}


	@Input()
	public set supportTextInset(value: SelectComponentCustomElement['supportTextInset']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.supportTextInset = value;
		});
	}
	public get supportTextInset(): SelectComponentCustomElement['supportTextInset'] {
		return this.nativeElement.supportTextInset;
	}


	public floatLabelWithoutAnimation(...args: Parameters<SelectComponentCustomElement['floatLabelWithoutAnimation']>): ReturnType<SelectComponentCustomElement['floatLabelWithoutAnimation']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.floatLabelWithoutAnimation(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<SelectComponentCustomElement>,
		protected zone: NgZone
	) {
		defineSelectComponent();
		changeDetectorRef.detach();
	}
}
