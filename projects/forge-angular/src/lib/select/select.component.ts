// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { SelectComponent as SelectComponentCustomElement, defineSelectComponent } from '@tylertech/forge';

/** The custom element class behind the `<forge-select>` component. */
@Component({
  selector: 'forge-select',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class SelectComponent {

	/** Gets/sets the label text. */
	@Input()
	public set label(value: SelectComponentCustomElement['label']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.label = value;
		});
	}

	public get label(): SelectComponentCustomElement['label'] {
		return this.elementRef.nativeElement.label;
	}

	/** Gets/sets the disabled state. */
	@Input()
	public set disabled(value: SelectComponentCustomElement['disabled'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';
		});
	}

	public get disabled(): SelectComponentCustomElement['disabled'] {
		return this.elementRef.nativeElement.disabled;
	}

	/** Gets/sets the invalid state. */
	@Input()
	public set invalid(value: SelectComponentCustomElement['invalid'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.invalid = value != null && `${value}` !== 'false';
		});
	}

	public get invalid(): SelectComponentCustomElement['invalid'] {
		return this.elementRef.nativeElement.invalid;
	}

	/** Gets/sets the required state which controls the visibility of the asterisk in the label. */
	@Input()
	public set required(value: SelectComponentCustomElement['required'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.required = value != null && `${value}` !== 'false';
		});
	}

	public get required(): SelectComponentCustomElement['required'] {
		return this.elementRef.nativeElement.required;
	}

	/** Controls the density type. */
	@Input()
	public set density(value: SelectComponentCustomElement['density']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.density = value;
		});
	}

	public get density(): SelectComponentCustomElement['density'] {
		return this.elementRef.nativeElement.density;
	}

	/** Whether the label should always float, never float or float as the user types. */
	@Input()
	public set floatLabelType(value: SelectComponentCustomElement['floatLabelType']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.floatLabelType = value;
		});
	}

	public get floatLabelType(): SelectComponentCustomElement['floatLabelType'] {
		return this.elementRef.nativeElement.floatLabelType;
	}

	/** The shape type to use. */
	@Input()
	public set shape(value: SelectComponentCustomElement['shape']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.shape = value;
		});
	}

	public get shape(): SelectComponentCustomElement['shape'] {
		return this.elementRef.nativeElement.shape;
	}

	/** Gets/sets the placeholder text. */
	@Input()
	public set placeholder(value: SelectComponentCustomElement['placeholder']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.placeholder = value;
		});
	}

	public get placeholder(): SelectComponentCustomElement['placeholder'] {
		return this.elementRef.nativeElement.placeholder;
	}

	/** Gets/sets the value. */
	@Input()
	public set value(value: SelectComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.value = value;
		});
	}

	public get value(): SelectComponentCustomElement['value'] {
		return this.elementRef.nativeElement.value;
	}

	/** Gets/sets the selected index. */
	@Input()
	public set selectedIndex(value: SelectComponentCustomElement['selectedIndex']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.selectedIndex = value;
		});
	}

	public get selectedIndex(): SelectComponentCustomElement['selectedIndex'] {
		return this.elementRef.nativeElement.selectedIndex;
	}

	/** Gets/sets the available options. */
	@Input()
	public set options(value: SelectComponentCustomElement['options']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.options = value;
		});
	}

	public get options(): SelectComponentCustomElement['options'] {
		return this.elementRef.nativeElement.options;
	}

	/** Gets/sets the multiple select state. */
	@Input()
	public set multiple(value: SelectComponentCustomElement['multiple'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.multiple = value != null && `${value}` !== 'false';
		});
	}

	public get multiple(): SelectComponentCustomElement['multiple'] {
		return this.elementRef.nativeElement.multiple;
	}

	/** Gets the open state of the dropdown. */
	@Input()
	public set open(value: SelectComponentCustomElement['open'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';
		});
	}

	public get open(): SelectComponentCustomElement['open'] {
		return this.elementRef.nativeElement.open;
	}

	/** Sets the option builder callback that will be executed when building the option list in the dropdown. */
	@Input()
	public set optionBuilder(value: SelectComponentCustomElement['optionBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.optionBuilder = value;
		});
	}

	public get optionBuilder(): SelectComponentCustomElement['optionBuilder'] {
		return this.elementRef.nativeElement.optionBuilder;
	}

	/** Sets the selected text builder callback that will be executed when getting the selected text to display in the field. */
	@Input()
	public set selectedTextBuilder(value: SelectComponentCustomElement['selectedTextBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.selectedTextBuilder = value;
		});
	}

	public get selectedTextBuilder(): SelectComponentCustomElement['selectedTextBuilder'] {
		return this.elementRef.nativeElement.selectedTextBuilder;
	}

	/** Sets the callback to be executed when the user selects a value. */
	@Input()
	public set beforeValueChange(value: SelectComponentCustomElement['beforeValueChange']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.beforeValueChange = value;
		});
	}

	public get beforeValueChange(): SelectComponentCustomElement['beforeValueChange'] {
		return this.elementRef.nativeElement.beforeValueChange;
	}

	/** Gets the popup element (when the dropdown is open). */
	@Input()
	public set popupElement(value: SelectComponentCustomElement['popupElement']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.popupElement = value;
		});
	}

	public get popupElement(): SelectComponentCustomElement['popupElement'] {
		return this.elementRef.nativeElement.popupElement;
	}

	/** Gets/sets the list of classes to apply to the popup element. */
	@Input()
	public set popupClasses(value: SelectComponentCustomElement['popupClasses']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.popupClasses = value;
		});
	}

	public get popupClasses(): SelectComponentCustomElement['popupClasses'] {
		return this.elementRef.nativeElement.popupClasses;
	}

	/** Gets/sets the callback function for generating header content within the popup. */
	@Input()
	public set popupHeaderBuilder(value: SelectComponentCustomElement['popupHeaderBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.popupHeaderBuilder = value;
		});
	}

	public get popupHeaderBuilder(): SelectComponentCustomElement['popupHeaderBuilder'] {
		return this.elementRef.nativeElement.popupHeaderBuilder;
	}

	/** Gets/sets the callback function for generating header content within the popup. */
	@Input()
	public set popupFooterBuilder(value: SelectComponentCustomElement['popupFooterBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.popupFooterBuilder = value;
		});
	}

	public get popupFooterBuilder(): SelectComponentCustomElement['popupFooterBuilder'] {
		return this.elementRef.nativeElement.popupFooterBuilder;
	}

	/** Gets/sets whether the popup width is synchronized with the popup target width. */
	@Input()
	public set syncPopupWidth(value: SelectComponentCustomElement['syncPopupWidth'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.syncPopupWidth = value != null && `${value}` !== 'false';
		});
	}

	public get syncPopupWidth(): SelectComponentCustomElement['syncPopupWidth'] {
		return this.elementRef.nativeElement.syncPopupWidth;
	}

	/** Gets/sets the maximum number of options to display in the dropdown. */
	@Input()
	public set optionLimit(value: SelectComponentCustomElement['optionLimit'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.optionLimit = +value;
		});
	}

	public get optionLimit(): SelectComponentCustomElement['optionLimit'] {
		return this.elementRef.nativeElement.optionLimit;
	}

	/** Controls the observation of scroll events on the dropdown. */
	@Input()
	public set observeScroll(value: SelectComponentCustomElement['observeScroll'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.observeScroll = value != null && `${value}` !== 'false';
		});
	}

	public get observeScroll(): SelectComponentCustomElement['observeScroll'] {
		return this.elementRef.nativeElement.observeScroll;
	}

	/** The number of pixels from the bottom to trigger the scroll bottom event. Only applicable if `observeScroll` is true. */
	@Input()
	public set observeScrollThreshold(value: SelectComponentCustomElement['observeScrollThreshold'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.observeScrollThreshold = +value;
		});
	}

	public get observeScrollThreshold(): SelectComponentCustomElement['observeScrollThreshold'] {
		return this.elementRef.nativeElement.observeScrollThreshold;
	}

	/** Gets/sets whether the popup width will be constrained to a max width of the viewport width (default: `100vw`). */
	@Input()
	public set constrainPopupWidth(value: SelectComponentCustomElement['constrainPopupWidth'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.constrainPopupWidth = value != null && `${value}` !== 'false';
		});
	}

	public get constrainPopupWidth(): SelectComponentCustomElement['constrainPopupWidth'] {
		return this.elementRef.nativeElement.constrainPopupWidth;
	}

	/**
	 * Gets/sets whether the options will wrap their text or not.
	 * This only applies if `constrainPopupWidth` is `true`, if there is an explicit width set via CSS.
	 */
	@Input()
	public set wrapOptionText(value: SelectComponentCustomElement['wrapOptionText'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.wrapOptionText = value != null && `${value}` !== 'false';
		});
	}

	public get wrapOptionText(): SelectComponentCustomElement['wrapOptionText'] {
		return this.elementRef.nativeElement.wrapOptionText;
	}


	public appendOptions(...args: Parameters<SelectComponentCustomElement['appendOptions']>): ReturnType<SelectComponentCustomElement['appendOptions']> {
		return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.appendOptions(...args));
	}


	public selectAll(...args: Parameters<SelectComponentCustomElement['selectAll']>): ReturnType<SelectComponentCustomElement['selectAll']> {
		return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.selectAll(...args));
	}


	public deselectAll(...args: Parameters<SelectComponentCustomElement['deselectAll']>): ReturnType<SelectComponentCustomElement['deselectAll']> {
		return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.deselectAll(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<SelectComponentCustomElement>,
		protected zone: NgZone
	) {
		defineSelectComponent();
		changeDetectorRef.detach();
	}
}
