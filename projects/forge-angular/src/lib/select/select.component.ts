// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { SelectComponent as SelectComponentCustomElement, defineSelectComponent } from '@tylertech/forge';

/**  */
@Component({
    selector: 'forge-select',
    changeDetection: ChangeDetectionStrategy.OnPush,
    template: '<ng-content></ng-content>',
    standalone: false
})
export class SelectComponent {

	/** The forge-select element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Controls the label text. */
	@Input()
	public set label(value: SelectComponentCustomElement['label']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.label = value;
		});
	}
	public get label(): SelectComponentCustomElement['label'] {
		return this.nativeElement.label;
	}

	/** Controls the placeholder text. */
	@Input()
	public set placeholder(value: SelectComponentCustomElement['placeholder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.placeholder = value;
		});
	}
	public get placeholder(): SelectComponentCustomElement['placeholder'] {
		return this.nativeElement.placeholder;
	}


	@Input({ transform: booleanAttribute })
	public set readonly(value: SelectComponentCustomElement['readonly']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.readonly = value;
		});
	}
	public get readonly(): SelectComponentCustomElement['readonly'] {
		return this.nativeElement.readonly;
	}

	/** Whether the label floats above the field. */
	@Input({ transform: booleanAttribute })
	public set floatLabel(value: SelectComponentCustomElement['floatLabel']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.floatLabel = value;
		});
	}
	public get floatLabel(): SelectComponentCustomElement['floatLabel'] {
		return this.nativeElement.floatLabel;
	}

	/** The density of the field. */
	@Input()
	public set density(value: SelectComponentCustomElement['density']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.density = value;
		});
	}
	public get density(): SelectComponentCustomElement['density'] {
		return this.nativeElement.density;
	}

	/** Whether the field is dense. */
	@Input({ transform: booleanAttribute })
	public set dense(value: SelectComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): SelectComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** Whether the field is disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: SelectComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): SelectComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** Whether the field is required. */
	@Input({ transform: booleanAttribute })
	public set required(value: SelectComponentCustomElement['required']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.required = value;
		});
	}
	public get required(): SelectComponentCustomElement['required'] {
		return this.nativeElement.required;
	}

	/** The position of the label. */
	@Input()
	public set labelPosition(value: SelectComponentCustomElement['labelPosition']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labelPosition = value;
		});
	}
	public get labelPosition(): SelectComponentCustomElement['labelPosition'] {
		return this.nativeElement.labelPosition;
	}

	/** Gets/sets the value. */
	@Input()
	public set value(value: SelectComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): SelectComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** Gets/sets the selected index. */
	@Input()
	public set selectedIndex(value: SelectComponentCustomElement['selectedIndex']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.selectedIndex = value;
		});
	}
	public get selectedIndex(): SelectComponentCustomElement['selectedIndex'] {
		return this.nativeElement.selectedIndex;
	}

	/** Gets/sets the available options. */
	@Input()
	public set options(value: SelectComponentCustomElement['options']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.options = value;
		});
	}
	public get options(): SelectComponentCustomElement['options'] {
		return this.nativeElement.options;
	}

	/** Gets/sets the multiple select state. */
	@Input({ transform: booleanAttribute })
	public set multiple(value: SelectComponentCustomElement['multiple']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.multiple = value;
		});
	}
	public get multiple(): SelectComponentCustomElement['multiple'] {
		return this.nativeElement.multiple;
	}

	/** Gets/sets the open state. */
	@Input({ transform: booleanAttribute })
	public set open(value: SelectComponentCustomElement['open']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.open = value;
		});
	}
	public get open(): SelectComponentCustomElement['open'] {
		return this.nativeElement.open;
	}

	/** Gets/sets the option builder function. */
	@Input()
	public set optionBuilder(value: SelectComponentCustomElement['optionBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.optionBuilder = value;
		});
	}
	public get optionBuilder(): SelectComponentCustomElement['optionBuilder'] {
		return this.nativeElement.optionBuilder;
	}

	/** Gets/sets the selected text builder function. */
	@Input()
	public set selectedTextBuilder(value: SelectComponentCustomElement['selectedTextBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.selectedTextBuilder = value;
		});
	}
	public get selectedTextBuilder(): SelectComponentCustomElement['selectedTextBuilder'] {
		return this.nativeElement.selectedTextBuilder;
	}

	/** Gets/sets the before value change callback. */
	@Input()
	public set beforeValueChange(value: SelectComponentCustomElement['beforeValueChange']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.beforeValueChange = value;
		});
	}
	public get beforeValueChange(): SelectComponentCustomElement['beforeValueChange'] {
		return this.nativeElement.beforeValueChange;
	}

	/** Gets/sets the list of classes to apply to the popup element. */
	@Input()
	public set popupClasses(value: SelectComponentCustomElement['popupClasses']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupClasses = value;
		});
	}
	public get popupClasses(): SelectComponentCustomElement['popupClasses'] {
		return this.nativeElement.popupClasses;
	}

	/** Gets/sets the callback function for generating header content within the popup. */
	@Input()
	public set popupHeaderBuilder(value: SelectComponentCustomElement['popupHeaderBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupHeaderBuilder = value;
		});
	}
	public get popupHeaderBuilder(): SelectComponentCustomElement['popupHeaderBuilder'] {
		return this.nativeElement.popupHeaderBuilder;
	}

	/** Gets/sets the callback function for generating header content within the popup. */
	@Input()
	public set popupFooterBuilder(value: SelectComponentCustomElement['popupFooterBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupFooterBuilder = value;
		});
	}
	public get popupFooterBuilder(): SelectComponentCustomElement['popupFooterBuilder'] {
		return this.nativeElement.popupFooterBuilder;
	}

	/** Gets/sets whether the popup width is synchronized with the popup target width. */
	@Input({ transform: booleanAttribute })
	public set syncPopupWidth(value: SelectComponentCustomElement['syncPopupWidth']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.syncPopupWidth = value;
		});
	}
	public get syncPopupWidth(): SelectComponentCustomElement['syncPopupWidth'] {
		return this.nativeElement.syncPopupWidth;
	}

	/** Gets/sets the maximum number of options to display in the dropdown. */
	@Input({ transform: numberAttribute })
	public set optionLimit(value: SelectComponentCustomElement['optionLimit']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.optionLimit = value;
		});
	}
	public get optionLimit(): SelectComponentCustomElement['optionLimit'] {
		return this.nativeElement.optionLimit;
	}

	/** Controls the observation of scroll events on the dropdown. */
	@Input({ transform: booleanAttribute })
	public set observeScroll(value: SelectComponentCustomElement['observeScroll']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.observeScroll = value;
		});
	}
	public get observeScroll(): SelectComponentCustomElement['observeScroll'] {
		return this.nativeElement.observeScroll;
	}

	/** The number of pixels from the bottom to trigger the scroll bottom event. Only applicable if `observeScroll` is true. */
	@Input({ transform: numberAttribute })
	public set observeScrollThreshold(value: SelectComponentCustomElement['observeScrollThreshold']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.observeScrollThreshold = value;
		});
	}
	public get observeScrollThreshold(): SelectComponentCustomElement['observeScrollThreshold'] {
		return this.nativeElement.observeScrollThreshold;
	}

	/** Gets/sets whether the popup width will be constrained to a max width of the viewport width (default: `100vw`). */
	@Input({ transform: booleanAttribute })
	public set constrainPopupWidth(value: SelectComponentCustomElement['constrainPopupWidth']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.constrainPopupWidth = value;
		});
	}
	public get constrainPopupWidth(): SelectComponentCustomElement['constrainPopupWidth'] {
		return this.nativeElement.constrainPopupWidth;
	}

	/** Gets/sets whether the options will wrap their text or not. This only applies if `constrainPopupWidth` is `true`, if there is an explicit width set via CSS. */
	@Input({ transform: booleanAttribute })
	public set wrapOptionText(value: SelectComponentCustomElement['wrapOptionText']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.wrapOptionText = value;
		});
	}
	public get wrapOptionText(): SelectComponentCustomElement['wrapOptionText'] {
		return this.nativeElement.wrapOptionText;
	}

	/** Gets/sets the placement of the popover. */
	@Input()
	public set popoverPlacement(value: SelectComponentCustomElement['popoverPlacement']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverPlacement = value;
		});
	}
	public get popoverPlacement(): SelectComponentCustomElement['popoverPlacement'] {
		return this.nativeElement.popoverPlacement;
	}

	/** Gets/sets the offset of the popover. */
	@Input()
	public set popoverOffset(value: SelectComponentCustomElement['popoverOffset']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverOffset = value;
		});
	}
	public get popoverOffset(): SelectComponentCustomElement['popoverOffset'] {
		return this.nativeElement.popoverOffset;
	}

	/** Gets/sets the flip state of the popover. */
	@Input()
	public set popoverFlip(value: SelectComponentCustomElement['popoverFlip']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverFlip = value;
		});
	}
	public get popoverFlip(): SelectComponentCustomElement['popoverFlip'] {
		return this.nativeElement.popoverFlip;
	}

	/** Gets/sets whether the popover should shift to fit within the viewport. */
	@Input()
	public set popoverShift(value: SelectComponentCustomElement['popoverShift']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverShift = value;
		});
	}
	public get popoverShift(): SelectComponentCustomElement['popoverShift'] {
		return this.nativeElement.popoverShift;
	}

	/** Gets/sets the fallback placements of the popover. */
	@Input()
	public set popoverFallbackPlacements(value: SelectComponentCustomElement['popoverFallbackPlacements']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverFallbackPlacements = value;
		});
	}
	public get popoverFallbackPlacements(): SelectComponentCustomElement['popoverFallbackPlacements'] {
		return this.nativeElement.popoverFallbackPlacements;
	}

	/** The alignment of the label. */
	@Input()
	public set labelAlignment(value: SelectComponentCustomElement['labelAlignment']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labelAlignment = value;
		});
	}
	public get labelAlignment(): SelectComponentCustomElement['labelAlignment'] {
		return this.nativeElement.labelAlignment;
	}

	/** Whether the field is invalid. */
	@Input({ transform: booleanAttribute })
	public set invalid(value: SelectComponentCustomElement['invalid']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.invalid = value;
		});
	}
	public get invalid(): SelectComponentCustomElement['invalid'] {
		return this.nativeElement.invalid;
	}

	/** Whether the field is optional. */
	@Input({ transform: booleanAttribute })
	public set optional(value: SelectComponentCustomElement['optional']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.optional = value;
		});
	}
	public get optional(): SelectComponentCustomElement['optional'] {
		return this.nativeElement.optional;
	}

	/** The variant of the field. */
	@Input()
	public set variant(value: SelectComponentCustomElement['variant']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.variant = value;
		});
	}
	public get variant(): SelectComponentCustomElement['variant'] {
		return this.nativeElement.variant;
	}

	/** The theme of the field. */
	@Input()
	public set theme(value: SelectComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): SelectComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}

	/** The shape of the field. */
	@Input()
	public set shape(value: SelectComponentCustomElement['shape']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.shape = value;
		});
	}
	public get shape(): SelectComponentCustomElement['shape'] {
		return this.nativeElement.shape;
	}

	/** Whether the popover icon is displayed. */
	@Input({ transform: booleanAttribute })
	public set popoverIcon(value: SelectComponentCustomElement['popoverIcon']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverIcon = value;
		});
	}
	public get popoverIcon(): SelectComponentCustomElement['popoverIcon'] {
		return this.nativeElement.popoverIcon;
	}

	/** The inset of the support text. */
	@Input()
	public set supportTextInset(value: SelectComponentCustomElement['supportTextInset']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.supportTextInset = value;
		});
	}
	public get supportTextInset(): SelectComponentCustomElement['supportTextInset'] {
		return this.nativeElement.supportTextInset;
	}

	/** Floats the label without an animation. Only applies when the label is inset. */
	public floatLabelWithoutAnimation(...args: Parameters<SelectComponentCustomElement['floatLabelWithoutAnimation']>): ReturnType<SelectComponentCustomElement['floatLabelWithoutAnimation']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.floatLabelWithoutAnimation(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<SelectComponentCustomElement>,
		protected zone: NgZone
	) {
		defineSelectComponent();
		changeDetectorRef.detach();
	}
}
