// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { SkipLinkComponent as SkipLinkComponentCustomElement, defineSkipLinkComponent } from '@tylertech/forge';

/**  */
@Component({
    selector: 'forge-skip-link',
    changeDetection: ChangeDetectionStrategy.OnPush,
    template: '<ng-content></ng-content>',
    standalone: false
})
export class SkipLinkComponent {

	/** The forge-skip-link element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The IDREF of the element to which the skip link should navigate. */
	@Input()
	public set target(value: SkipLinkComponentCustomElement['target']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.target = value;
		});
	}
	public get target(): SkipLinkComponentCustomElement['target'] {
		return this.nativeElement.target;
	}

	/** The theme applied to the skip link. */
	@Input()
	public set theme(value: SkipLinkComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): SkipLinkComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}

	/** Whether or not the skip link uses a muted color scheme. */
	@Input({ transform: booleanAttribute })
	public set muted(value: SkipLinkComponentCustomElement['muted']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.muted = value;
		});
	}
	public get muted(): SkipLinkComponentCustomElement['muted'] {
		return this.nativeElement.muted;
	}

	/** Whether or not the skip link should remain visible when not focused. */
	@Input({ transform: booleanAttribute })
	public set persistent(value: SkipLinkComponentCustomElement['persistent']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.persistent = value;
		});
	}
	public get persistent(): SkipLinkComponentCustomElement['persistent'] {
		return this.nativeElement.persistent;
	}

	/** Whether or not the skip link renders within its container. */
	@Input({ transform: booleanAttribute })
	public set inline(value: SkipLinkComponentCustomElement['inline']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.inline = value;
		});
	}
	public get inline(): SkipLinkComponentCustomElement['inline'] {
		return this.nativeElement.inline;
	}

	/** Sets the skip link to skip browser navigation and scroll to the target element. */
	@Input({ transform: booleanAttribute })
	public set skipUrlChange(value: SkipLinkComponentCustomElement['skipUrlChange']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.skipUrlChange = value;
		});
	}
	public get skipUrlChange(): SkipLinkComponentCustomElement['skipUrlChange'] {
		return this.nativeElement.skipUrlChange;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<SkipLinkComponentCustomElement>,
		protected zone: NgZone
	) {
		defineSkipLinkComponent();
		changeDetectorRef.detach();
	}
}
