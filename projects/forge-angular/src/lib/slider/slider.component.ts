// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { SliderComponent as SliderComponentCustomElement, defineSliderComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-slider',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class SliderComponent {

	/** The forge-slider element. */
	public readonly nativeElement = this.elementRef.nativeElement;


	public get form(): SliderComponentCustomElement['form'] {
		return this.nativeElement.form;
	}


	public get labels(): SliderComponentCustomElement['labels'] {
		return this.nativeElement.labels;
	}

	/** The form control name. */
	@Input()
	public set name(value: SliderComponentCustomElement['name']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.name = value;
		});
	}
	public get name(): SliderComponentCustomElement['name'] {
		return this.nativeElement.name;
	}

	/** The form control name for the start handle in range mode. */
	@Input()
	public set nameStart(value: SliderComponentCustomElement['nameStart']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.nameStart = value;
		});
	}
	public get nameStart(): SliderComponentCustomElement['nameStart'] {
		return this.nativeElement.nameStart;
	}

	/** The form control name for the end handle in range mode. */
	@Input()
	public set nameEnd(value: SliderComponentCustomElement['nameEnd']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.nameEnd = value;
		});
	}
	public get nameEnd(): SliderComponentCustomElement['nameEnd'] {
		return this.nativeElement.nameEnd;
	}

	/** The current value of the slider. */
	@Input({ transform: numberAttribute })
	public set value(value: SliderComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): SliderComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** The current start value of the slider. */
	@Input({ transform: numberAttribute })
	public set valueStart(value: SliderComponentCustomElement['valueStart']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.valueStart = value;
		});
	}
	public get valueStart(): SliderComponentCustomElement['valueStart'] {
		return this.nativeElement.valueStart;
	}

	/** The current end value of the slider. */
	@Input({ transform: numberAttribute })
	public set valueEnd(value: SliderComponentCustomElement['valueEnd']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.valueEnd = value;
		});
	}
	public get valueEnd(): SliderComponentCustomElement['valueEnd'] {
		return this.nativeElement.valueEnd;
	}

	/** The label text for the slider handle. */
	@Input()
	public set label(value: SliderComponentCustomElement['label']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.label = value;
		});
	}
	public get label(): SliderComponentCustomElement['label'] {
		return this.nativeElement.label;
	}

	/** The label text for the start slider handle. */
	@Input()
	public set labelStart(value: SliderComponentCustomElement['labelStart']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labelStart = value;
		});
	}
	public get labelStart(): SliderComponentCustomElement['labelStart'] {
		return this.nativeElement.labelStart;
	}

	/** The label text for the end slider handle. */
	@Input()
	public set labelEnd(value: SliderComponentCustomElement['labelEnd']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labelEnd = value;
		});
	}
	public get labelEnd(): SliderComponentCustomElement['labelEnd'] {
		return this.nativeElement.labelEnd;
	}

	/** A function that returns a label for the slider handle. */
	@Input()
	public set labelBuilder(value: SliderComponentCustomElement['labelBuilder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labelBuilder = value;
		});
	}
	public get labelBuilder(): SliderComponentCustomElement['labelBuilder'] {
		return this.nativeElement.labelBuilder;
	}

	/** The minimum value of the slider. */
	@Input({ transform: numberAttribute })
	public set min(value: SliderComponentCustomElement['min']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.min = value;
		});
	}
	public get min(): SliderComponentCustomElement['min'] {
		return this.nativeElement.min;
	}

	/** The maximum value of the slider. */
	@Input({ transform: numberAttribute })
	public set max(value: SliderComponentCustomElement['max']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.max = value;
		});
	}
	public get max(): SliderComponentCustomElement['max'] {
		return this.nativeElement.max;
	}

	/** The step value of the slider. */
	@Input({ transform: numberAttribute })
	public set step(value: SliderComponentCustomElement['step']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.step = value;
		});
	}
	public get step(): SliderComponentCustomElement['step'] {
		return this.nativeElement.step;
	}

	/** Controls if tickmarks are visible. */
	@Input({ transform: booleanAttribute })
	public set tickmarks(value: SliderComponentCustomElement['tickmarks']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.tickmarks = value;
		});
	}
	public get tickmarks(): SliderComponentCustomElement['tickmarks'] {
		return this.nativeElement.tickmarks;
	}

	/** Controls if labels are visible. */
	@Input({ transform: booleanAttribute })
	public set labeled(value: SliderComponentCustomElement['labeled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labeled = value;
		});
	}
	public get labeled(): SliderComponentCustomElement['labeled'] {
		return this.nativeElement.labeled;
	}

	/** Controls range mode. */
	@Input({ transform: booleanAttribute })
	public set range(value: SliderComponentCustomElement['range']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.range = value;
		});
	}
	public get range(): SliderComponentCustomElement['range'] {
		return this.nativeElement.range;
	}

	/** Controls if the slider is disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: SliderComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): SliderComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** Controls if the slider is readonly. */
	@Input({ transform: booleanAttribute })
	public set readonly(value: SliderComponentCustomElement['readonly']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.readonly = value;
		});
	}
	public get readonly(): SliderComponentCustomElement['readonly'] {
		return this.nativeElement.readonly;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<SliderComponentCustomElement>,
		protected zone: NgZone
	) {
		defineSliderComponent();
		changeDetectorRef.detach();
	}
}
