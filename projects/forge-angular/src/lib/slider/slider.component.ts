// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { SliderComponent as SliderComponentCustomElement, defineSliderComponent } from '@tylertech/forge';

/** The custom element class behind the `<forge-slider>` component. */
@Component({
  selector: 'forge-slider',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class SliderComponent {

	/** Gets/sets the type of slider this is: `continuous` (default), `discrete`, `discrete-markers` */
	@Input()
	public set type(value: SliderComponentCustomElement['type']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.type = value;
		});
	}

	public get type(): SliderComponentCustomElement['type'] {
		return this.elementRef.nativeElement.type;
	}

	/** Gets/sets the value of the slider. */
	@Input()
	public set value(value: SliderComponentCustomElement['value'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.value = +value;
		});
	}

	public get value(): SliderComponentCustomElement['value'] {
		return this.elementRef.nativeElement.value;
	}

	/** Gets/sets the start value of the slider (only applicable for range sliders). */
	@Input()
	public set valueStart(value: SliderComponentCustomElement['valueStart'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.valueStart = +value;
		});
	}

	public get valueStart(): SliderComponentCustomElement['valueStart'] {
		return this.elementRef.nativeElement.valueStart;
	}

	/** Gets/sets the minimum value for the slider. */
	@Input()
	public set min(value: SliderComponentCustomElement['min'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.min = +value;
		});
	}

	public get min(): SliderComponentCustomElement['min'] {
		return this.elementRef.nativeElement.min;
	}

	/** Gets/sets the maximum value for the slider. */
	@Input()
	public set max(value: SliderComponentCustomElement['max'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.max = +value;
		});
	}

	public get max(): SliderComponentCustomElement['max'] {
		return this.elementRef.nativeElement.max;
	}

	/** Gets/sets the step value for the slider when in discrete mode. */
	@Input()
	public set step(value: SliderComponentCustomElement['step'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.step = +value;
		});
	}

	public get step(): SliderComponentCustomElement['step'] {
		return this.elementRef.nativeElement.step;
	}

	/** Gets/sets the disabled state of the slider. */
	@Input()
	public set disabled(value: SliderComponentCustomElement['disabled'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';
		});
	}

	public get disabled(): SliderComponentCustomElement['disabled'] {
		return this.elementRef.nativeElement.disabled;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<SliderComponentCustomElement>,
		protected zone: NgZone
	) {
		defineSliderComponent();
		changeDetectorRef.detach();
	}
}
