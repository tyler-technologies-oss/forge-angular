// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { SplitButtonComponent as SplitButtonComponentCustomElement, defineSplitButtonComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-split-button',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class SplitButtonComponent {

	/** The forge-split-button element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The variant of the buttons. Valid values are `text`, `outlined`, `tonal`, `filled`, and `raised`. */
	@Input()
	public set variant(value: SplitButtonComponentCustomElement['variant']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.variant = value;
		});
	}
	public get variant(): SplitButtonComponentCustomElement['variant'] {
		return this.nativeElement.variant;
	}

	/** The theme of the buttons. Valid values are `primary`, `secondary`, `tertiary`, `success`, `error`, `warning`, `info`. */
	@Input()
	public set theme(value: SplitButtonComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): SplitButtonComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}

	/** Whether or not the buttons are disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: SplitButtonComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): SplitButtonComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** Whether or not the buttons are dense. */
	@Input({ transform: booleanAttribute })
	public set dense(value: SplitButtonComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): SplitButtonComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}

	/** Whether or not the buttons are pill-shaped. */
	@Input({ transform: booleanAttribute })
	public set pill(value: SplitButtonComponentCustomElement['pill']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.pill = value;
		});
	}
	public get pill(): SplitButtonComponentCustomElement['pill'] {
		return this.nativeElement.pill;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<SplitButtonComponentCustomElement>,
		protected zone: NgZone
	) {
		defineSplitButtonComponent();
		changeDetectorRef.detach();
	}
}
