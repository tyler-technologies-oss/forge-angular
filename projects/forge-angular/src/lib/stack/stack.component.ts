// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { StackComponent as StackComponentCustomElement, defineStackComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-stack',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class StackComponent {

	/** The forge-stack element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Sets the direction of child items to be horizontal. */
	@Input({ transform: booleanAttribute })
	public set inline(value: StackComponentCustomElement['inline']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.inline = value;
		});
	}
	public get inline(): StackComponentCustomElement['inline'] {
		return this.nativeElement.inline;
	}

	/** Wrap is used to wrap child elements to a new row when there's not enough space. This only works when inline is set to true. */
	@Input({ transform: booleanAttribute })
	public set wrap(value: StackComponentCustomElement['wrap']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.wrap = value;
		});
	}
	public get wrap(): StackComponentCustomElement['wrap'] {
		return this.nativeElement.wrap;
	}

	/** Stretch allows each child element to take up as much width as possible until the parent container is filled. You can override this on each individual child element by changing its --forge-stack-stretch CSS custom property. */
	@Input({ transform: booleanAttribute })
	public set stretch(value: StackComponentCustomElement['stretch']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.stretch = value;
		});
	}
	public get stretch(): StackComponentCustomElement['stretch'] {
		return this.nativeElement.stretch;
	}

	/** Controls the amount of space between child elements within a stack. */
	@Input()
	public set gap(value: StackComponentCustomElement['gap']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.gap = value;
		});
	}
	public get gap(): StackComponentCustomElement['gap'] {
		return this.nativeElement.gap;
	}

	/** Controls the align-items property of the stack. */
	@Input()
	public set alignment(value: StackComponentCustomElement['alignment']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.alignment = value;
		});
	}
	public get alignment(): StackComponentCustomElement['alignment'] {
		return this.nativeElement.alignment;
	}

	/** Controls the justify-content property of the stack. */
	@Input()
	public set justify(value: StackComponentCustomElement['justify']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.justify = value;
		});
	}
	public get justify(): StackComponentCustomElement['justify'] {
		return this.nativeElement.justify;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<StackComponentCustomElement>,
		protected zone: NgZone
	) {
		defineStackComponent();
		changeDetectorRef.detach();
	}
}
