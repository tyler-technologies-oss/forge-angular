// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { StateLayerComponent as StateLayerComponentCustomElement, defineStateLayerComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-state-layer',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class StateLayerComponent {

	/** The forge-state-layer element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The element to attach the state layer to. */
	@Input()
	public set targetElement(value: StateLayerComponentCustomElement['targetElement']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.targetElement = value;
		});
	}
	public get targetElement(): StateLayerComponentCustomElement['targetElement'] {
		return this.nativeElement.targetElement;
	}

	/** The id of the element to attach the state layer to. */
	@Input()
	public set target(value: StateLayerComponentCustomElement['target']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.target = value;
		});
	}
	public get target(): StateLayerComponentCustomElement['target'] {
		return this.nativeElement.target;
	}

	/** Controls whether the state layer is disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: StateLayerComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): StateLayerComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/**
	 * Triggers the animation to run.
	 * 
	 * Note: If coordinates are not provided, the transition will originate from the center of the target element.
	 */
	public playAnimation(...args: Parameters<StateLayerComponentCustomElement['playAnimation']>): ReturnType<StateLayerComponentCustomElement['playAnimation']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.playAnimation(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<StateLayerComponentCustomElement>,
		protected zone: NgZone
	) {
		defineStateLayerComponent();
		changeDetectorRef.detach();
	}
}
