// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { TabBarComponent as TabBarComponentCustomElement, defineTabBarComponent } from '@tylertech/forge';

/** The custom element class behind the `<forge-tab-bar>` element. */
@Component({
  selector: 'forge-tab-bar',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class TabBarComponent {

	/** The forge-tab-bar element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Gets and sets the active tab index. */
	@Input({ transform: numberAttribute })
	public set activeTab(value: TabBarComponentCustomElement['activeTab']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.activeTab = value;
		});
	}
	public get activeTab(): TabBarComponentCustomElement['activeTab'] {
		return this.nativeElement.activeTab;
	}

	/** Gets/sets the layout mode that controls how the tabs are sized and rendered. */
	@Input()
	public set layoutMode(value: TabBarComponentCustomElement['layoutMode']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.layoutMode = value;
		});
	}
	public get layoutMode(): TabBarComponentCustomElement['layoutMode'] {
		return this.nativeElement.layoutMode;
	}

	/** Gets/sets the layout alignment. Only pertains to non-full width layout modes. */
	@Input()
	public set layoutAlign(value: TabBarComponentCustomElement['layoutAlign']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.layoutAlign = value;
		});
	}
	public get layoutAlign(): TabBarComponentCustomElement['layoutAlign'] {
		return this.nativeElement.layoutAlign;
	}

	/** Gets/sets whether the component displays an underline or not. Default is `false`. */
	@Input({ transform: booleanAttribute })
	public set underline(value: TabBarComponentCustomElement['underline']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.underline = value;
		});
	}
	public get underline(): TabBarComponentCustomElement['underline'] {
		return this.nativeElement.underline;
	}

	/** Gets/sets whether tabs are auto-activated when using arrow keys. Default is `true` */
	@Input({ transform: booleanAttribute })
	public set autoActivate(value: TabBarComponentCustomElement['autoActivate']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.autoActivate = value;
		});
	}
	public get autoActivate(): TabBarComponentCustomElement['autoActivate'] {
		return this.nativeElement.autoActivate;
	}

	/** Gets/sets whether the tabs are displayed with as their stacked variant. Default is `false`. */
	@Input({ transform: booleanAttribute })
	public set stacked(value: TabBarComponentCustomElement['stacked']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.stacked = value;
		});
	}
	public get stacked(): TabBarComponentCustomElement['stacked'] {
		return this.nativeElement.stacked;
	}

	/** Gets/sets whether the scroll buttons can be displayed or not. Default is `true`. The component handles visibility automatically. */
	@Input({ transform: booleanAttribute })
	public set scrollButtons(value: TabBarComponentCustomElement['scrollButtons']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.scrollButtons = value;
		});
	}
	public get scrollButtons(): TabBarComponentCustomElement['scrollButtons'] {
		return this.nativeElement.scrollButtons;
	}

	/** Gets/sets whether the scroll buttons are visible indefinitely or not. Default is `false`. */
	@Input({ transform: booleanAttribute })
	public set forceScrollButtons(value: TabBarComponentCustomElement['forceScrollButtons']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.forceScrollButtons = value;
		});
	}
	public get forceScrollButtons(): TabBarComponentCustomElement['forceScrollButtons'] {
		return this.nativeElement.forceScrollButtons;
	}

	/** Activates the tab at the given index. */
	public activateTab(...args: Parameters<TabBarComponentCustomElement['activateTab']>): ReturnType<TabBarComponentCustomElement['activateTab']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.activateTab(...args));
	}

	/** Scrolls the tab at the given index into view. */
	public scrollTabIntoView(...args: Parameters<TabBarComponentCustomElement['scrollTabIntoView']>): ReturnType<TabBarComponentCustomElement['scrollTabIntoView']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.scrollTabIntoView(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<TabBarComponentCustomElement>,
		protected zone: NgZone
	) {
		defineTabBarComponent();
		changeDetectorRef.detach();
	}
}
