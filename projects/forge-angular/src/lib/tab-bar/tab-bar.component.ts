// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { TabBarComponent as TabBarComponentCustomElement, defineTabBarComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-tab-bar',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class TabBarComponent {

	/** The forge-tab-bar element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The disabled state of the tab bar. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: TabBarComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): TabBarComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** The index of the active tab. */
	@Input({ transform: numberAttribute })
	public set activeTab(value: TabBarComponentCustomElement['activeTab']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.activeTab = value;
		});
	}
	public get activeTab(): TabBarComponentCustomElement['activeTab'] {
		return this.nativeElement.activeTab;
	}

	/** Controls whether the tab bar is vertical or horizontal. */
	@Input({ transform: booleanAttribute })
	public set vertical(value: TabBarComponentCustomElement['vertical']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.vertical = value;
		});
	}
	public get vertical(): TabBarComponentCustomElement['vertical'] {
		return this.nativeElement.vertical;
	}

	/** Controls whether the tabs stretch the full width of their container or cluster together at their minimum width. */
	@Input({ transform: booleanAttribute })
	public set clustered(value: TabBarComponentCustomElement['clustered']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.clustered = value;
		});
	}
	public get clustered(): TabBarComponentCustomElement['clustered'] {
		return this.nativeElement.clustered;
	}

	/** Controls whether the tabs are taller to allow for slotted leading/trailing elements. */
	@Input({ transform: booleanAttribute })
	public set stacked(value: TabBarComponentCustomElement['stacked']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.stacked = value;
		});
	}
	public get stacked(): TabBarComponentCustomElement['stacked'] {
		return this.nativeElement.stacked;
	}

	/** Controls whether the tabs are styled as secondary tab navigation. */
	@Input({ transform: booleanAttribute })
	public set secondary(value: TabBarComponentCustomElement['secondary']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.secondary = value;
		});
	}
	public get secondary(): TabBarComponentCustomElement['secondary'] {
		return this.nativeElement.secondary;
	}

	/** Controls whether the tabs are rendered inverted (tab indicator at top instead of bottom). */
	@Input({ transform: booleanAttribute })
	public set inverted(value: TabBarComponentCustomElement['inverted']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.inverted = value;
		});
	}
	public get inverted(): TabBarComponentCustomElement['inverted'] {
		return this.nativeElement.inverted;
	}

	/** Controls whether the tabs are automatically activated when receiving focus. */
	@Input({ transform: booleanAttribute })
	public set autoActivate(value: TabBarComponentCustomElement['autoActivate']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.autoActivate = value;
		});
	}
	public get autoActivate(): TabBarComponentCustomElement['autoActivate'] {
		return this.nativeElement.autoActivate;
	}

	/** Controls whether scroll buttons are displayed when the tabs overflow their container. */
	@Input({ transform: booleanAttribute })
	public set scrollButtons(value: TabBarComponentCustomElement['scrollButtons']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.scrollButtons = value;
		});
	}
	public get scrollButtons(): TabBarComponentCustomElement['scrollButtons'] {
		return this.nativeElement.scrollButtons;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<TabBarComponentCustomElement>,
		protected zone: NgZone
	) {
		defineTabBarComponent();
		changeDetectorRef.detach();
	}
}
