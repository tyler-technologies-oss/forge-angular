// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { TabComponent as TabComponentCustomElement, defineTabComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-tab',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class TabComponent {

	/** The forge-tab element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The disabled state of the tab. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: TabComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): TabComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** The selected state of the tab. */
	@Input({ transform: booleanAttribute })
	public set selected(value: TabComponentCustomElement['selected']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.selected = value;
		});
	}
	public get selected(): TabComponentCustomElement['selected'] {
		return this.nativeElement.selected;
	}

	/** Controls whether the tab is vertical or horizontal. */
	@Input({ transform: booleanAttribute })
	public set vertical(value: TabComponentCustomElement['vertical']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.vertical = value;
		});
	}
	public get vertical(): TabComponentCustomElement['vertical'] {
		return this.nativeElement.vertical;
	}

	/** Controls whether the tab is taller to allow for slotted leading/trailing elements. */
	@Input({ transform: booleanAttribute })
	public set stacked(value: TabComponentCustomElement['stacked']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.stacked = value;
		});
	}
	public get stacked(): TabComponentCustomElement['stacked'] {
		return this.nativeElement.stacked;
	}

	/** Controls whether the tab is styled as secondary tab navigation. */
	@Input({ transform: booleanAttribute })
	public set secondary(value: TabComponentCustomElement['secondary']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.secondary = value;
		});
	}
	public get secondary(): TabComponentCustomElement['secondary'] {
		return this.nativeElement.secondary;
	}

	/** Controls whether the tab indicator is rendered on the opposite side of the tab. */
	@Input({ transform: booleanAttribute })
	public set inverted(value: TabComponentCustomElement['inverted']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.inverted = value;
		});
	}
	public get inverted(): TabComponentCustomElement['inverted'] {
		return this.nativeElement.inverted;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<TabComponentCustomElement>,
		protected zone: NgZone
	) {
		defineTabComponent();
		changeDetectorRef.detach();
	}
}
