// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { TextFieldComponent as TextFieldComponentCustomElement, defineTextFieldComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-text-field',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class TextFieldComponent {

	/** The forge-text-field element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Gets a reference to the element that the popover should target for best alignment. */
	public get popoverTargetElement(): TextFieldComponentCustomElement['popoverTargetElement'] {
		return this.nativeElement.popoverTargetElement;
	}

	/** Whether the clear button appears when text has been entered. */
	@Input({ transform: booleanAttribute })
	public set showClear(value: TextFieldComponentCustomElement['showClear']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.showClear = value;
		});
	}
	public get showClear(): TextFieldComponentCustomElement['showClear'] {
		return this.nativeElement.showClear;
	}


	@Input()
	public set labelPosition(value: TextFieldComponentCustomElement['labelPosition']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labelPosition = value;
		});
	}
	public get labelPosition(): TextFieldComponentCustomElement['labelPosition'] {
		return this.nativeElement.labelPosition;
	}


	@Input()
	public set labelAlignment(value: TextFieldComponentCustomElement['labelAlignment']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.labelAlignment = value;
		});
	}
	public get labelAlignment(): TextFieldComponentCustomElement['labelAlignment'] {
		return this.nativeElement.labelAlignment;
	}


	@Input({ transform: booleanAttribute })
	public set invalid(value: TextFieldComponentCustomElement['invalid']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.invalid = value;
		});
	}
	public get invalid(): TextFieldComponentCustomElement['invalid'] {
		return this.nativeElement.invalid;
	}


	@Input({ transform: booleanAttribute })
	public set required(value: TextFieldComponentCustomElement['required']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.required = value;
		});
	}
	public get required(): TextFieldComponentCustomElement['required'] {
		return this.nativeElement.required;
	}


	@Input({ transform: booleanAttribute })
	public set optional(value: TextFieldComponentCustomElement['optional']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.optional = value;
		});
	}
	public get optional(): TextFieldComponentCustomElement['optional'] {
		return this.nativeElement.optional;
	}


	@Input({ transform: booleanAttribute })
	public set disabled(value: TextFieldComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): TextFieldComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}


	@Input({ transform: booleanAttribute })
	public set floatLabel(value: TextFieldComponentCustomElement['floatLabel']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.floatLabel = value;
		});
	}
	public get floatLabel(): TextFieldComponentCustomElement['floatLabel'] {
		return this.nativeElement.floatLabel;
	}


	@Input()
	public set variant(value: TextFieldComponentCustomElement['variant']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.variant = value;
		});
	}
	public get variant(): TextFieldComponentCustomElement['variant'] {
		return this.nativeElement.variant;
	}


	@Input()
	public set theme(value: TextFieldComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): TextFieldComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}


	@Input()
	public set shape(value: TextFieldComponentCustomElement['shape']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.shape = value;
		});
	}
	public get shape(): TextFieldComponentCustomElement['shape'] {
		return this.nativeElement.shape;
	}


	@Input()
	public set density(value: TextFieldComponentCustomElement['density']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.density = value;
		});
	}
	public get density(): TextFieldComponentCustomElement['density'] {
		return this.nativeElement.density;
	}


	@Input({ transform: booleanAttribute })
	public set dense(value: TextFieldComponentCustomElement['dense']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dense = value;
		});
	}
	public get dense(): TextFieldComponentCustomElement['dense'] {
		return this.nativeElement.dense;
	}


	@Input({ transform: booleanAttribute })
	public set popoverIcon(value: TextFieldComponentCustomElement['popoverIcon']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popoverIcon = value;
		});
	}
	public get popoverIcon(): TextFieldComponentCustomElement['popoverIcon'] {
		return this.nativeElement.popoverIcon;
	}


	@Input()
	public set supportTextInset(value: TextFieldComponentCustomElement['supportTextInset']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.supportTextInset = value;
		});
	}
	public get supportTextInset(): TextFieldComponentCustomElement['supportTextInset'] {
		return this.nativeElement.supportTextInset;
	}


	public floatLabelWithoutAnimation(...args: Parameters<TextFieldComponentCustomElement['floatLabelWithoutAnimation']>): ReturnType<TextFieldComponentCustomElement['floatLabelWithoutAnimation']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.floatLabelWithoutAnimation(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<TextFieldComponentCustomElement>,
		protected zone: NgZone
	) {
		defineTextFieldComponent();
		changeDetectorRef.detach();
	}
}
