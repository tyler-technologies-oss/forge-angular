// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { TextFieldComponent as TextFieldComponentCustomElement, defineTextFieldComponent } from '@tylertech/forge';

/** The web component class behind the `<forge-text-field>` custom element. */
@Component({
  selector: 'forge-text-field',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class TextFieldComponent {

	/** The forge-text-field element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** Controls the density type. */
	@Input()
	public set density(value: TextFieldComponentCustomElement['density']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.density = value;
		});
	}
	public get density(): TextFieldComponentCustomElement['density'] {
		return this.nativeElement.density;
	}

	/** Whether the label should always float, never float or float as the user types. */
	@Input()
	public set floatLabelType(value: TextFieldComponentCustomElement['floatLabelType']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.floatLabelType = value;
		});
	}
	public get floatLabelType(): TextFieldComponentCustomElement['floatLabelType'] {
		return this.nativeElement.floatLabelType;
	}

	/** The shape type to use. */
	@Input()
	public set shape(value: TextFieldComponentCustomElement['shape']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.shape = value;
		});
	}
	public get shape(): TextFieldComponentCustomElement['shape'] {
		return this.nativeElement.shape;
	}

	/** Gets/sets the invalid state. */
	@Input({ transform: booleanAttribute })
	public set invalid(value: TextFieldComponentCustomElement['invalid']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.invalid = value;
		});
	}
	public get invalid(): TextFieldComponentCustomElement['invalid'] {
		return this.nativeElement.invalid;
	}

	/** Gets/sets the required state which controls the visibility of the asterisk in the label. */
	@Input({ transform: booleanAttribute })
	public set required(value: TextFieldComponentCustomElement['required']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.required = value;
		});
	}
	public get required(): TextFieldComponentCustomElement['required'] {
		return this.nativeElement.required;
	}

	/** Controls whether the label should be floating or not. */
	public floatLabel(...args: Parameters<TextFieldComponentCustomElement['floatLabel']>): ReturnType<TextFieldComponentCustomElement['floatLabel']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.floatLabel(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<TextFieldComponentCustomElement>,
		protected zone: NgZone
	) {
		defineTextFieldComponent();
		changeDetectorRef.detach();
	}
}
