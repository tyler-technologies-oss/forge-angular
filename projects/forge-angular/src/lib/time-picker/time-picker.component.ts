// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { TimePickerComponent as TimePickerComponentCustomElement, defineTimePickerComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-time-picker',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class TimePickerComponent {

	/** The forge-time-picker element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The current value of the time picker. */
	@Input()
	public set value(value: TimePickerComponentCustomElement['value']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.value = value;
		});
	}
	public get value(): TimePickerComponentCustomElement['value'] {
		return this.nativeElement.value;
	}

	/** Whether or not the time picker is open. */
	@Input({ transform: booleanAttribute })
	public set open(value: TimePickerComponentCustomElement['open']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.open = value;
		});
	}
	public get open(): TimePickerComponentCustomElement['open'] {
		return this.nativeElement.open;
	}

	/** Whether or not to allow seconds in the time picker. */
	@Input({ transform: booleanAttribute })
	public set allowSeconds(value: TimePickerComponentCustomElement['allowSeconds']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.allowSeconds = value;
		});
	}
	public get allowSeconds(): TimePickerComponentCustomElement['allowSeconds'] {
		return this.nativeElement.allowSeconds;
	}

	/** Whether or not the time picker input should be masked. */
	@Input({ transform: booleanAttribute })
	public set masked(value: TimePickerComponentCustomElement['masked']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.masked = value;
		});
	}
	public get masked(): TimePickerComponentCustomElement['masked'] {
		return this.nativeElement.masked;
	}

	/** Whether or not to show the mask format in the input. */
	@Input({ transform: booleanAttribute })
	public set showMaskFormat(value: TimePickerComponentCustomElement['showMaskFormat']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.showMaskFormat = value;
		});
	}
	public get showMaskFormat(): TimePickerComponentCustomElement['showMaskFormat'] {
		return this.nativeElement.showMaskFormat;
	}

	/** Whether or not to use 24-hour time. */
	@Input({ transform: booleanAttribute })
	public set use24HourTime(value: TimePickerComponentCustomElement['use24HourTime']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.use24HourTime = value;
		});
	}
	public get use24HourTime(): TimePickerComponentCustomElement['use24HourTime'] {
		return this.nativeElement.use24HourTime;
	}

	/** Whether or not to allow invalid times. */
	@Input({ transform: booleanAttribute })
	public set allowInvalidTime(value: TimePickerComponentCustomElement['allowInvalidTime']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.allowInvalidTime = value;
		});
	}
	public get allowInvalidTime(): TimePickerComponentCustomElement['allowInvalidTime'] {
		return this.nativeElement.allowInvalidTime;
	}

	/** The minimum time that can be selected. */
	@Input()
	public set min(value: TimePickerComponentCustomElement['min']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.min = value;
		});
	}
	public get min(): TimePickerComponentCustomElement['min'] {
		return this.nativeElement.min;
	}

	/** The maximum time that can be selected. */
	@Input()
	public set max(value: TimePickerComponentCustomElement['max']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.max = value;
		});
	}
	public get max(): TimePickerComponentCustomElement['max'] {
		return this.nativeElement.max;
	}

	/** An array of times that cannot be selected. */
	@Input()
	public set restrictedTimes(value: TimePickerComponentCustomElement['restrictedTimes']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.restrictedTimes = value;
		});
	}
	public get restrictedTimes(): TimePickerComponentCustomElement['restrictedTimes'] {
		return this.nativeElement.restrictedTimes;
	}

	/** The time to start the time picker at. */
	@Input()
	public set startTime(value: TimePickerComponentCustomElement['startTime']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.startTime = value;
		});
	}
	public get startTime(): TimePickerComponentCustomElement['startTime'] {
		return this.nativeElement.startTime;
	}

	/** The step interval for the time picker. */
	@Input({ transform: numberAttribute })
	public set step(value: TimePickerComponentCustomElement['step']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.step = value;
		});
	}
	public get step(): TimePickerComponentCustomElement['step'] {
		return this.nativeElement.step;
	}

	/** Whether or not to allow manual input of the time. */
	@Input({ transform: booleanAttribute })
	public set allowInput(value: TimePickerComponentCustomElement['allowInput']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.allowInput = value;
		});
	}
	public get allowInput(): TimePickerComponentCustomElement['allowInput'] {
		return this.nativeElement.allowInput;
	}

	/** Whether or not to show a "Now" button. */
	@Input({ transform: booleanAttribute })
	public set showNow(value: TimePickerComponentCustomElement['showNow']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.showNow = value;
		});
	}
	public get showNow(): TimePickerComponentCustomElement['showNow'] {
		return this.nativeElement.showNow;
	}

	/** Whether or not to display hour options in dropdown. */
	@Input({ transform: booleanAttribute })
	public set showHourOptions(value: TimePickerComponentCustomElement['showHourOptions']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.showHourOptions = value;
		});
	}
	public get showHourOptions(): TimePickerComponentCustomElement['showHourOptions'] {
		return this.nativeElement.showHourOptions;
	}

	/** An array of custom time picker options. */
	@Input()
	public set customOptions(value: TimePickerComponentCustomElement['customOptions']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.customOptions = value;
		});
	}
	public get customOptions(): TimePickerComponentCustomElement['customOptions'] {
		return this.nativeElement.customOptions;
	}

	/** A callback function to validate the time. */
	@Input()
	public set validationCallback(value: TimePickerComponentCustomElement['validationCallback']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.validationCallback = value;
		});
	}
	public get validationCallback(): TimePickerComponentCustomElement['validationCallback'] {
		return this.nativeElement.validationCallback;
	}

	/** A callback function to parse the time. */
	@Input()
	public set parseCallback(value: TimePickerComponentCustomElement['parseCallback']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.parseCallback = value;
		});
	}
	public get parseCallback(): TimePickerComponentCustomElement['parseCallback'] {
		return this.nativeElement.parseCallback;
	}

	/** A callback function to format the time. */
	@Input()
	public set formatCallback(value: TimePickerComponentCustomElement['formatCallback']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.formatCallback = value;
		});
	}
	public get formatCallback(): TimePickerComponentCustomElement['formatCallback'] {
		return this.nativeElement.formatCallback;
	}

	/** A callback function to coerce the time. */
	@Input()
	public set coercionCallback(value: TimePickerComponentCustomElement['coercionCallback']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.coercionCallback = value;
		});
	}
	public get coercionCallback(): TimePickerComponentCustomElement['coercionCallback'] {
		return this.nativeElement.coercionCallback;
	}

	/** A callback function to prepare the mask. */
	@Input()
	public set prepareMaskCallback(value: TimePickerComponentCustomElement['prepareMaskCallback']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.prepareMaskCallback = value;
		});
	}
	public get prepareMaskCallback(): TimePickerComponentCustomElement['prepareMaskCallback'] {
		return this.nativeElement.prepareMaskCallback;
	}

	/** Whether or not the time picker is disabled. */
	@Input({ transform: booleanAttribute })
	public set disabled(value: TimePickerComponentCustomElement['disabled']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.disabled = value;
		});
	}
	public get disabled(): TimePickerComponentCustomElement['disabled'] {
		return this.nativeElement.disabled;
	}

	/** The classes to apply to the time picker popup. */
	@Input()
	public set popupClasses(value: TimePickerComponentCustomElement['popupClasses']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupClasses = value;
		});
	}
	public get popupClasses(): TimePickerComponentCustomElement['popupClasses'] {
		return this.nativeElement.popupClasses;
	}

	/** Whether or not to allow the time picker to be a dropdown. */
	@Input({ transform: booleanAttribute })
	public set allowDropdown(value: TimePickerComponentCustomElement['allowDropdown']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.allowDropdown = value;
		});
	}
	public get allowDropdown(): TimePickerComponentCustomElement['allowDropdown'] {
		return this.nativeElement.allowDropdown;
	}

	/** The target element to attach the popup to. */
	@Input()
	public set popupTarget(value: TimePickerComponentCustomElement['popupTarget']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.popupTarget = value;
		});
	}
	public get popupTarget(): TimePickerComponentCustomElement['popupTarget'] {
		return this.nativeElement.popupTarget;
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<TimePickerComponentCustomElement>,
		protected zone: NgZone
	) {
		defineTimePickerComponent();
		changeDetectorRef.detach();
	}
}
