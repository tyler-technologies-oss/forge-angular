// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { ToastComponent as ToastComponentCustomElement, defineToastComponent } from '@tylertech/forge';

/** The custom element class behind the `<forge-toast>` web component. */
@Component({
  selector: 'forge-toast',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ToastComponent {

	/** The forge-toast element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The message to display in the toast. */
	@Input()
	public set message(value: ToastComponentCustomElement['message']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.message = value;
		});
	}
	public get message(): ToastComponentCustomElement['message'] {
		return this.nativeElement.message;
	}

	/** The text to display in the action button. */
	@Input()
	public set actionText(value: ToastComponentCustomElement['actionText']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.actionText = value;
		});
	}
	public get actionText(): ToastComponentCustomElement['actionText'] {
		return this.nativeElement.actionText;
	}

	/** The time in milliseconds to show the toast. */
	@Input({ transform: numberAttribute })
	public set duration(value: ToastComponentCustomElement['duration']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.duration = value;
		});
	}
	public get duration(): ToastComponentCustomElement['duration'] {
		return this.nativeElement.duration;
	}

	/** The placement of the toast. */
	@Input()
	public set placement(value: ToastComponentCustomElement['placement']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.placement = value;
		});
	}
	public get placement(): ToastComponentCustomElement['placement'] {
		return this.nativeElement.placement;
	}

	/** Sets the toast builder function for displaying custom content. */
	@Input()
	public set builder(value: ToastComponentCustomElement['builder']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.builder = value;
		});
	}
	public get builder(): ToastComponentCustomElement['builder'] {
		return this.nativeElement.builder;
	}

	/** Controls the visibility of the close button. */
	@Input({ transform: booleanAttribute })
	public set showClose(value: ToastComponentCustomElement['showClose']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.showClose = value;
		});
	}
	public get showClose(): ToastComponentCustomElement['showClose'] {
		return this.nativeElement.showClose;
	}


	public initializedCallback(...args: Parameters<ToastComponentCustomElement['initializedCallback']>): ReturnType<ToastComponentCustomElement['initializedCallback']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.initializedCallback(...args));
	}

	/** Hides the toast and removes it from the DOM. */
	public hide(...args: Parameters<ToastComponentCustomElement['hide']>): ReturnType<ToastComponentCustomElement['hide']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.hide(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ToastComponentCustomElement>,
		protected zone: NgZone
	) {
		defineToastComponent();
		changeDetectorRef.detach();
	}
}
