// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, numberAttribute, Input } from '@angular/core';
import { ToastComponent as ToastComponentCustomElement, defineToastComponent } from '@tylertech/forge';

/**  */
@Component({
  selector: 'forge-toast',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class ToastComponent {

	/** The forge-toast element. */
	public readonly nativeElement = this.elementRef.nativeElement;

	/** The open state. */
	@Input({ transform: booleanAttribute })
	public set open(value: ToastComponentCustomElement['open']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.open = value;
		});
	}
	public get open(): ToastComponentCustomElement['open'] {
		return this.nativeElement.open;
	}

	/** The duration in milliseconds that the toast is displayed. */
	@Input({ transform: numberAttribute })
	public set duration(value: ToastComponentCustomElement['duration']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.duration = value;
		});
	}
	public get duration(): ToastComponentCustomElement['duration'] {
		return this.nativeElement.duration;
	}

	/** The placement of the toast. */
	@Input()
	public set placement(value: ToastComponentCustomElement['placement']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.placement = value;
		});
	}
	public get placement(): ToastComponentCustomElement['placement'] {
		return this.nativeElement.placement;
	}

	/** The text for the action button. This controls the visibility of the action button. */
	@Input()
	public set actionText(value: ToastComponentCustomElement['actionText']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.actionText = value;
		});
	}
	public get actionText(): ToastComponentCustomElement['actionText'] {
		return this.nativeElement.actionText;
	}

	/** Whether the toast is dismissible (displays a close button). */
	@Input({ transform: booleanAttribute })
	public set dismissible(value: ToastComponentCustomElement['dismissible']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dismissible = value;
		});
	}
	public get dismissible(): ToastComponentCustomElement['dismissible'] {
		return this.nativeElement.dismissible;
	}

	/** The accessible label for the dismiss button. */
	@Input()
	public set dismissLabel(value: ToastComponentCustomElement['dismissLabel']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.dismissLabel = value;
		});
	}
	public get dismissLabel(): ToastComponentCustomElement['dismissLabel'] {
		return this.nativeElement.dismissLabel;
	}

	/** The theme of the toast. */
	@Input()
	public set theme(value: ToastComponentCustomElement['theme']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.theme = value;
		});
	}
	public get theme(): ToastComponentCustomElement['theme'] {
		return this.nativeElement.theme;
	}


	public show(...args: Parameters<ToastComponentCustomElement['show']>): ReturnType<ToastComponentCustomElement['show']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.show(...args));
	}


	public hide(...args: Parameters<ToastComponentCustomElement['hide']>): ReturnType<ToastComponentCustomElement['hide']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.hide(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<ToastComponentCustomElement>,
		protected zone: NgZone
	) {
		defineToastComponent();
		changeDetectorRef.detach();
	}
}
