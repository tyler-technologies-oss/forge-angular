// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { TooltipComponent as TooltipComponentCustomElement, defineTooltipComponent } from '@tylertech/forge';

/** The custom element class behind the `<forge-tooltip>` element. */
@Component({
  selector: 'forge-tooltip',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class TooltipComponent {

	/** Gets/sets the tooltip text. */
	@Input()
	public set text(value: TooltipComponentCustomElement['text']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.text = value;
		});
	}

	public get text(): TooltipComponentCustomElement['text'] {
		return this.elementRef.nativeElement.text;
	}

	/** Sets the tooltip builder function for display complex tooltip content. */
	@Input()
	public set builder(value: TooltipComponentCustomElement['builder']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.builder = value;
		});
	}

	public get builder(): TooltipComponentCustomElement['builder'] {
		return this.elementRef.nativeElement.builder;
	}

	/** Gets/sets the target element selector. */
	@Input()
	public set target(value: TooltipComponentCustomElement['target']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.target = value;
		});
	}

	public get target(): TooltipComponentCustomElement['target'] {
		return this.elementRef.nativeElement.target;
	}

	/** The tooltip display delay in milliseconds. */
	@Input()
	public set delay(value: TooltipComponentCustomElement['delay'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.delay = +value;
		});
	}

	public get delay(): TooltipComponentCustomElement['delay'] {
		return this.elementRef.nativeElement.delay;
	}

	/** Gets/sets the position. */
	@Input()
	public set position(value: TooltipComponentCustomElement['position']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.position = value;
		});
	}

	public get position(): TooltipComponentCustomElement['position'] {
		return this.elementRef.nativeElement.position;
	}

	/** Gets the open state of the tooltip. */
	@Input()
	public set open(value: TooltipComponentCustomElement['open'] | string) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';
		});
	}

	public get open(): TooltipComponentCustomElement['open'] {
		return this.elementRef.nativeElement.open;
	}


	@Input()
	public set tooltipElement(value: TooltipComponentCustomElement['tooltipElement']) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.tooltipElement = value;
		});
	}

	public get tooltipElement(): TooltipComponentCustomElement['tooltipElement'] {
		return this.elementRef.nativeElement.tooltipElement;
	}

	/** Hides the tooltip if it's open. */
	public hide(...args: Parameters<TooltipComponentCustomElement['hide']>): ReturnType<TooltipComponentCustomElement['hide']> {
		return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.hide(...args));
	}

	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<TooltipComponentCustomElement>,
		protected zone: NgZone
	) {
		defineTooltipComponent();
		changeDetectorRef.detach();
	}
}
